/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdStatsModule : module object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdStatsModule {
  /// activations_armor_hardener integer
  #[serde(rename = "activations_armor_hardener")]
  activations_armor_hardener: Option<i64>,
  /// activations_armor_repair_unit integer
  #[serde(rename = "activations_armor_repair_unit")]
  activations_armor_repair_unit: Option<i64>,
  /// activations_armor_resistance_shift_hardener integer
  #[serde(rename = "activations_armor_resistance_shift_hardener")]
  activations_armor_resistance_shift_hardener: Option<i64>,
  /// activations_automated_targeting_system integer
  #[serde(rename = "activations_automated_targeting_system")]
  activations_automated_targeting_system: Option<i64>,
  /// activations_bastion integer
  #[serde(rename = "activations_bastion")]
  activations_bastion: Option<i64>,
  /// activations_bomb_launcher integer
  #[serde(rename = "activations_bomb_launcher")]
  activations_bomb_launcher: Option<i64>,
  /// activations_capacitor_booster integer
  #[serde(rename = "activations_capacitor_booster")]
  activations_capacitor_booster: Option<i64>,
  /// activations_cargo_scanner integer
  #[serde(rename = "activations_cargo_scanner")]
  activations_cargo_scanner: Option<i64>,
  /// activations_cloaking_device integer
  #[serde(rename = "activations_cloaking_device")]
  activations_cloaking_device: Option<i64>,
  /// activations_clone_vat_bay integer
  #[serde(rename = "activations_clone_vat_bay")]
  activations_clone_vat_bay: Option<i64>,
  /// activations_cynosural_field integer
  #[serde(rename = "activations_cynosural_field")]
  activations_cynosural_field: Option<i64>,
  /// activations_damage_control integer
  #[serde(rename = "activations_damage_control")]
  activations_damage_control: Option<i64>,
  /// activations_data_miners integer
  #[serde(rename = "activations_data_miners")]
  activations_data_miners: Option<i64>,
  /// activations_drone_control_unit integer
  #[serde(rename = "activations_drone_control_unit")]
  activations_drone_control_unit: Option<i64>,
  /// activations_drone_tracking_modules integer
  #[serde(rename = "activations_drone_tracking_modules")]
  activations_drone_tracking_modules: Option<i64>,
  /// activations_eccm integer
  #[serde(rename = "activations_eccm")]
  activations_eccm: Option<i64>,
  /// activations_ecm integer
  #[serde(rename = "activations_ecm")]
  activations_ecm: Option<i64>,
  /// activations_ecm_burst integer
  #[serde(rename = "activations_ecm_burst")]
  activations_ecm_burst: Option<i64>,
  /// activations_energy_destabilizer integer
  #[serde(rename = "activations_energy_destabilizer")]
  activations_energy_destabilizer: Option<i64>,
  /// activations_energy_vampire integer
  #[serde(rename = "activations_energy_vampire")]
  activations_energy_vampire: Option<i64>,
  /// activations_energy_weapon integer
  #[serde(rename = "activations_energy_weapon")]
  activations_energy_weapon: Option<i64>,
  /// activations_festival_launcher integer
  #[serde(rename = "activations_festival_launcher")]
  activations_festival_launcher: Option<i64>,
  /// activations_frequency_mining_laser integer
  #[serde(rename = "activations_frequency_mining_laser")]
  activations_frequency_mining_laser: Option<i64>,
  /// activations_fueled_armor_repairer integer
  #[serde(rename = "activations_fueled_armor_repairer")]
  activations_fueled_armor_repairer: Option<i64>,
  /// activations_fueled_shield_booster integer
  #[serde(rename = "activations_fueled_shield_booster")]
  activations_fueled_shield_booster: Option<i64>,
  /// activations_gang_coordinator integer
  #[serde(rename = "activations_gang_coordinator")]
  activations_gang_coordinator: Option<i64>,
  /// activations_gas_cloud_harvester integer
  #[serde(rename = "activations_gas_cloud_harvester")]
  activations_gas_cloud_harvester: Option<i64>,
  /// activations_hull_repair_unit integer
  #[serde(rename = "activations_hull_repair_unit")]
  activations_hull_repair_unit: Option<i64>,
  /// activations_hybrid_weapon integer
  #[serde(rename = "activations_hybrid_weapon")]
  activations_hybrid_weapon: Option<i64>,
  /// activations_industrial_core integer
  #[serde(rename = "activations_industrial_core")]
  activations_industrial_core: Option<i64>,
  /// activations_interdiction_sphere_launcher integer
  #[serde(rename = "activations_interdiction_sphere_launcher")]
  activations_interdiction_sphere_launcher: Option<i64>,
  /// activations_micro_jump_drive integer
  #[serde(rename = "activations_micro_jump_drive")]
  activations_micro_jump_drive: Option<i64>,
  /// activations_mining_laser integer
  #[serde(rename = "activations_mining_laser")]
  activations_mining_laser: Option<i64>,
  /// activations_missile_launcher integer
  #[serde(rename = "activations_missile_launcher")]
  activations_missile_launcher: Option<i64>,
  /// activations_passive_targeting_system integer
  #[serde(rename = "activations_passive_targeting_system")]
  activations_passive_targeting_system: Option<i64>,
  /// activations_probe_launcher integer
  #[serde(rename = "activations_probe_launcher")]
  activations_probe_launcher: Option<i64>,
  /// activations_projected_eccm integer
  #[serde(rename = "activations_projected_eccm")]
  activations_projected_eccm: Option<i64>,
  /// activations_projectile_weapon integer
  #[serde(rename = "activations_projectile_weapon")]
  activations_projectile_weapon: Option<i64>,
  /// activations_propulsion_module integer
  #[serde(rename = "activations_propulsion_module")]
  activations_propulsion_module: Option<i64>,
  /// activations_remote_armor_repairer integer
  #[serde(rename = "activations_remote_armor_repairer")]
  activations_remote_armor_repairer: Option<i64>,
  /// activations_remote_capacitor_transmitter integer
  #[serde(rename = "activations_remote_capacitor_transmitter")]
  activations_remote_capacitor_transmitter: Option<i64>,
  /// activations_remote_ecm_burst integer
  #[serde(rename = "activations_remote_ecm_burst")]
  activations_remote_ecm_burst: Option<i64>,
  /// activations_remote_hull_repairer integer
  #[serde(rename = "activations_remote_hull_repairer")]
  activations_remote_hull_repairer: Option<i64>,
  /// activations_remote_sensor_booster integer
  #[serde(rename = "activations_remote_sensor_booster")]
  activations_remote_sensor_booster: Option<i64>,
  /// activations_remote_sensor_damper integer
  #[serde(rename = "activations_remote_sensor_damper")]
  activations_remote_sensor_damper: Option<i64>,
  /// activations_remote_shield_booster integer
  #[serde(rename = "activations_remote_shield_booster")]
  activations_remote_shield_booster: Option<i64>,
  /// activations_remote_tracking_computer integer
  #[serde(rename = "activations_remote_tracking_computer")]
  activations_remote_tracking_computer: Option<i64>,
  /// activations_salvager integer
  #[serde(rename = "activations_salvager")]
  activations_salvager: Option<i64>,
  /// activations_sensor_booster integer
  #[serde(rename = "activations_sensor_booster")]
  activations_sensor_booster: Option<i64>,
  /// activations_shield_booster integer
  #[serde(rename = "activations_shield_booster")]
  activations_shield_booster: Option<i64>,
  /// activations_shield_hardener integer
  #[serde(rename = "activations_shield_hardener")]
  activations_shield_hardener: Option<i64>,
  /// activations_ship_scanner integer
  #[serde(rename = "activations_ship_scanner")]
  activations_ship_scanner: Option<i64>,
  /// activations_siege integer
  #[serde(rename = "activations_siege")]
  activations_siege: Option<i64>,
  /// activations_smart_bomb integer
  #[serde(rename = "activations_smart_bomb")]
  activations_smart_bomb: Option<i64>,
  /// activations_stasis_web integer
  #[serde(rename = "activations_stasis_web")]
  activations_stasis_web: Option<i64>,
  /// activations_strip_miner integer
  #[serde(rename = "activations_strip_miner")]
  activations_strip_miner: Option<i64>,
  /// activations_super_weapon integer
  #[serde(rename = "activations_super_weapon")]
  activations_super_weapon: Option<i64>,
  /// activations_survey_scanner integer
  #[serde(rename = "activations_survey_scanner")]
  activations_survey_scanner: Option<i64>,
  /// activations_target_breaker integer
  #[serde(rename = "activations_target_breaker")]
  activations_target_breaker: Option<i64>,
  /// activations_target_painter integer
  #[serde(rename = "activations_target_painter")]
  activations_target_painter: Option<i64>,
  /// activations_tracking_computer integer
  #[serde(rename = "activations_tracking_computer")]
  activations_tracking_computer: Option<i64>,
  /// activations_tracking_disruptor integer
  #[serde(rename = "activations_tracking_disruptor")]
  activations_tracking_disruptor: Option<i64>,
  /// activations_tractor_beam integer
  #[serde(rename = "activations_tractor_beam")]
  activations_tractor_beam: Option<i64>,
  /// activations_triage integer
  #[serde(rename = "activations_triage")]
  activations_triage: Option<i64>,
  /// activations_warp_disrupt_field_generator integer
  #[serde(rename = "activations_warp_disrupt_field_generator")]
  activations_warp_disrupt_field_generator: Option<i64>,
  /// activations_warp_scrambler integer
  #[serde(rename = "activations_warp_scrambler")]
  activations_warp_scrambler: Option<i64>,
  /// link_weapons integer
  #[serde(rename = "link_weapons")]
  link_weapons: Option<i64>,
  /// overload integer
  #[serde(rename = "overload")]
  overload: Option<i64>,
  /// repairs integer
  #[serde(rename = "repairs")]
  repairs: Option<i64>
}

impl GetCharactersCharacterIdStatsModule {
  /// module object
  pub fn new() -> GetCharactersCharacterIdStatsModule {
    GetCharactersCharacterIdStatsModule {
      activations_armor_hardener: None,
      activations_armor_repair_unit: None,
      activations_armor_resistance_shift_hardener: None,
      activations_automated_targeting_system: None,
      activations_bastion: None,
      activations_bomb_launcher: None,
      activations_capacitor_booster: None,
      activations_cargo_scanner: None,
      activations_cloaking_device: None,
      activations_clone_vat_bay: None,
      activations_cynosural_field: None,
      activations_damage_control: None,
      activations_data_miners: None,
      activations_drone_control_unit: None,
      activations_drone_tracking_modules: None,
      activations_eccm: None,
      activations_ecm: None,
      activations_ecm_burst: None,
      activations_energy_destabilizer: None,
      activations_energy_vampire: None,
      activations_energy_weapon: None,
      activations_festival_launcher: None,
      activations_frequency_mining_laser: None,
      activations_fueled_armor_repairer: None,
      activations_fueled_shield_booster: None,
      activations_gang_coordinator: None,
      activations_gas_cloud_harvester: None,
      activations_hull_repair_unit: None,
      activations_hybrid_weapon: None,
      activations_industrial_core: None,
      activations_interdiction_sphere_launcher: None,
      activations_micro_jump_drive: None,
      activations_mining_laser: None,
      activations_missile_launcher: None,
      activations_passive_targeting_system: None,
      activations_probe_launcher: None,
      activations_projected_eccm: None,
      activations_projectile_weapon: None,
      activations_propulsion_module: None,
      activations_remote_armor_repairer: None,
      activations_remote_capacitor_transmitter: None,
      activations_remote_ecm_burst: None,
      activations_remote_hull_repairer: None,
      activations_remote_sensor_booster: None,
      activations_remote_sensor_damper: None,
      activations_remote_shield_booster: None,
      activations_remote_tracking_computer: None,
      activations_salvager: None,
      activations_sensor_booster: None,
      activations_shield_booster: None,
      activations_shield_hardener: None,
      activations_ship_scanner: None,
      activations_siege: None,
      activations_smart_bomb: None,
      activations_stasis_web: None,
      activations_strip_miner: None,
      activations_super_weapon: None,
      activations_survey_scanner: None,
      activations_target_breaker: None,
      activations_target_painter: None,
      activations_tracking_computer: None,
      activations_tracking_disruptor: None,
      activations_tractor_beam: None,
      activations_triage: None,
      activations_warp_disrupt_field_generator: None,
      activations_warp_scrambler: None,
      link_weapons: None,
      overload: None,
      repairs: None
    }
  }

  pub fn set_activations_armor_hardener(&mut self, activations_armor_hardener: i64) {
    self.activations_armor_hardener = Some(activations_armor_hardener);
  }

  pub fn with_activations_armor_hardener(mut self, activations_armor_hardener: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_armor_hardener = Some(activations_armor_hardener);
    self
  }

  pub fn activations_armor_hardener(&self) -> Option<&i64> {
    self.activations_armor_hardener.as_ref()
  }

  pub fn reset_activations_armor_hardener(&mut self) {
    self.activations_armor_hardener = None;
  }

  pub fn set_activations_armor_repair_unit(&mut self, activations_armor_repair_unit: i64) {
    self.activations_armor_repair_unit = Some(activations_armor_repair_unit);
  }

  pub fn with_activations_armor_repair_unit(mut self, activations_armor_repair_unit: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_armor_repair_unit = Some(activations_armor_repair_unit);
    self
  }

  pub fn activations_armor_repair_unit(&self) -> Option<&i64> {
    self.activations_armor_repair_unit.as_ref()
  }

  pub fn reset_activations_armor_repair_unit(&mut self) {
    self.activations_armor_repair_unit = None;
  }

  pub fn set_activations_armor_resistance_shift_hardener(&mut self, activations_armor_resistance_shift_hardener: i64) {
    self.activations_armor_resistance_shift_hardener = Some(activations_armor_resistance_shift_hardener);
  }

  pub fn with_activations_armor_resistance_shift_hardener(mut self, activations_armor_resistance_shift_hardener: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_armor_resistance_shift_hardener = Some(activations_armor_resistance_shift_hardener);
    self
  }

  pub fn activations_armor_resistance_shift_hardener(&self) -> Option<&i64> {
    self.activations_armor_resistance_shift_hardener.as_ref()
  }

  pub fn reset_activations_armor_resistance_shift_hardener(&mut self) {
    self.activations_armor_resistance_shift_hardener = None;
  }

  pub fn set_activations_automated_targeting_system(&mut self, activations_automated_targeting_system: i64) {
    self.activations_automated_targeting_system = Some(activations_automated_targeting_system);
  }

  pub fn with_activations_automated_targeting_system(mut self, activations_automated_targeting_system: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_automated_targeting_system = Some(activations_automated_targeting_system);
    self
  }

  pub fn activations_automated_targeting_system(&self) -> Option<&i64> {
    self.activations_automated_targeting_system.as_ref()
  }

  pub fn reset_activations_automated_targeting_system(&mut self) {
    self.activations_automated_targeting_system = None;
  }

  pub fn set_activations_bastion(&mut self, activations_bastion: i64) {
    self.activations_bastion = Some(activations_bastion);
  }

  pub fn with_activations_bastion(mut self, activations_bastion: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_bastion = Some(activations_bastion);
    self
  }

  pub fn activations_bastion(&self) -> Option<&i64> {
    self.activations_bastion.as_ref()
  }

  pub fn reset_activations_bastion(&mut self) {
    self.activations_bastion = None;
  }

  pub fn set_activations_bomb_launcher(&mut self, activations_bomb_launcher: i64) {
    self.activations_bomb_launcher = Some(activations_bomb_launcher);
  }

  pub fn with_activations_bomb_launcher(mut self, activations_bomb_launcher: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_bomb_launcher = Some(activations_bomb_launcher);
    self
  }

  pub fn activations_bomb_launcher(&self) -> Option<&i64> {
    self.activations_bomb_launcher.as_ref()
  }

  pub fn reset_activations_bomb_launcher(&mut self) {
    self.activations_bomb_launcher = None;
  }

  pub fn set_activations_capacitor_booster(&mut self, activations_capacitor_booster: i64) {
    self.activations_capacitor_booster = Some(activations_capacitor_booster);
  }

  pub fn with_activations_capacitor_booster(mut self, activations_capacitor_booster: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_capacitor_booster = Some(activations_capacitor_booster);
    self
  }

  pub fn activations_capacitor_booster(&self) -> Option<&i64> {
    self.activations_capacitor_booster.as_ref()
  }

  pub fn reset_activations_capacitor_booster(&mut self) {
    self.activations_capacitor_booster = None;
  }

  pub fn set_activations_cargo_scanner(&mut self, activations_cargo_scanner: i64) {
    self.activations_cargo_scanner = Some(activations_cargo_scanner);
  }

  pub fn with_activations_cargo_scanner(mut self, activations_cargo_scanner: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_cargo_scanner = Some(activations_cargo_scanner);
    self
  }

  pub fn activations_cargo_scanner(&self) -> Option<&i64> {
    self.activations_cargo_scanner.as_ref()
  }

  pub fn reset_activations_cargo_scanner(&mut self) {
    self.activations_cargo_scanner = None;
  }

  pub fn set_activations_cloaking_device(&mut self, activations_cloaking_device: i64) {
    self.activations_cloaking_device = Some(activations_cloaking_device);
  }

  pub fn with_activations_cloaking_device(mut self, activations_cloaking_device: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_cloaking_device = Some(activations_cloaking_device);
    self
  }

  pub fn activations_cloaking_device(&self) -> Option<&i64> {
    self.activations_cloaking_device.as_ref()
  }

  pub fn reset_activations_cloaking_device(&mut self) {
    self.activations_cloaking_device = None;
  }

  pub fn set_activations_clone_vat_bay(&mut self, activations_clone_vat_bay: i64) {
    self.activations_clone_vat_bay = Some(activations_clone_vat_bay);
  }

  pub fn with_activations_clone_vat_bay(mut self, activations_clone_vat_bay: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_clone_vat_bay = Some(activations_clone_vat_bay);
    self
  }

  pub fn activations_clone_vat_bay(&self) -> Option<&i64> {
    self.activations_clone_vat_bay.as_ref()
  }

  pub fn reset_activations_clone_vat_bay(&mut self) {
    self.activations_clone_vat_bay = None;
  }

  pub fn set_activations_cynosural_field(&mut self, activations_cynosural_field: i64) {
    self.activations_cynosural_field = Some(activations_cynosural_field);
  }

  pub fn with_activations_cynosural_field(mut self, activations_cynosural_field: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_cynosural_field = Some(activations_cynosural_field);
    self
  }

  pub fn activations_cynosural_field(&self) -> Option<&i64> {
    self.activations_cynosural_field.as_ref()
  }

  pub fn reset_activations_cynosural_field(&mut self) {
    self.activations_cynosural_field = None;
  }

  pub fn set_activations_damage_control(&mut self, activations_damage_control: i64) {
    self.activations_damage_control = Some(activations_damage_control);
  }

  pub fn with_activations_damage_control(mut self, activations_damage_control: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_damage_control = Some(activations_damage_control);
    self
  }

  pub fn activations_damage_control(&self) -> Option<&i64> {
    self.activations_damage_control.as_ref()
  }

  pub fn reset_activations_damage_control(&mut self) {
    self.activations_damage_control = None;
  }

  pub fn set_activations_data_miners(&mut self, activations_data_miners: i64) {
    self.activations_data_miners = Some(activations_data_miners);
  }

  pub fn with_activations_data_miners(mut self, activations_data_miners: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_data_miners = Some(activations_data_miners);
    self
  }

  pub fn activations_data_miners(&self) -> Option<&i64> {
    self.activations_data_miners.as_ref()
  }

  pub fn reset_activations_data_miners(&mut self) {
    self.activations_data_miners = None;
  }

  pub fn set_activations_drone_control_unit(&mut self, activations_drone_control_unit: i64) {
    self.activations_drone_control_unit = Some(activations_drone_control_unit);
  }

  pub fn with_activations_drone_control_unit(mut self, activations_drone_control_unit: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_drone_control_unit = Some(activations_drone_control_unit);
    self
  }

  pub fn activations_drone_control_unit(&self) -> Option<&i64> {
    self.activations_drone_control_unit.as_ref()
  }

  pub fn reset_activations_drone_control_unit(&mut self) {
    self.activations_drone_control_unit = None;
  }

  pub fn set_activations_drone_tracking_modules(&mut self, activations_drone_tracking_modules: i64) {
    self.activations_drone_tracking_modules = Some(activations_drone_tracking_modules);
  }

  pub fn with_activations_drone_tracking_modules(mut self, activations_drone_tracking_modules: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_drone_tracking_modules = Some(activations_drone_tracking_modules);
    self
  }

  pub fn activations_drone_tracking_modules(&self) -> Option<&i64> {
    self.activations_drone_tracking_modules.as_ref()
  }

  pub fn reset_activations_drone_tracking_modules(&mut self) {
    self.activations_drone_tracking_modules = None;
  }

  pub fn set_activations_eccm(&mut self, activations_eccm: i64) {
    self.activations_eccm = Some(activations_eccm);
  }

  pub fn with_activations_eccm(mut self, activations_eccm: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_eccm = Some(activations_eccm);
    self
  }

  pub fn activations_eccm(&self) -> Option<&i64> {
    self.activations_eccm.as_ref()
  }

  pub fn reset_activations_eccm(&mut self) {
    self.activations_eccm = None;
  }

  pub fn set_activations_ecm(&mut self, activations_ecm: i64) {
    self.activations_ecm = Some(activations_ecm);
  }

  pub fn with_activations_ecm(mut self, activations_ecm: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_ecm = Some(activations_ecm);
    self
  }

  pub fn activations_ecm(&self) -> Option<&i64> {
    self.activations_ecm.as_ref()
  }

  pub fn reset_activations_ecm(&mut self) {
    self.activations_ecm = None;
  }

  pub fn set_activations_ecm_burst(&mut self, activations_ecm_burst: i64) {
    self.activations_ecm_burst = Some(activations_ecm_burst);
  }

  pub fn with_activations_ecm_burst(mut self, activations_ecm_burst: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_ecm_burst = Some(activations_ecm_burst);
    self
  }

  pub fn activations_ecm_burst(&self) -> Option<&i64> {
    self.activations_ecm_burst.as_ref()
  }

  pub fn reset_activations_ecm_burst(&mut self) {
    self.activations_ecm_burst = None;
  }

  pub fn set_activations_energy_destabilizer(&mut self, activations_energy_destabilizer: i64) {
    self.activations_energy_destabilizer = Some(activations_energy_destabilizer);
  }

  pub fn with_activations_energy_destabilizer(mut self, activations_energy_destabilizer: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_energy_destabilizer = Some(activations_energy_destabilizer);
    self
  }

  pub fn activations_energy_destabilizer(&self) -> Option<&i64> {
    self.activations_energy_destabilizer.as_ref()
  }

  pub fn reset_activations_energy_destabilizer(&mut self) {
    self.activations_energy_destabilizer = None;
  }

  pub fn set_activations_energy_vampire(&mut self, activations_energy_vampire: i64) {
    self.activations_energy_vampire = Some(activations_energy_vampire);
  }

  pub fn with_activations_energy_vampire(mut self, activations_energy_vampire: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_energy_vampire = Some(activations_energy_vampire);
    self
  }

  pub fn activations_energy_vampire(&self) -> Option<&i64> {
    self.activations_energy_vampire.as_ref()
  }

  pub fn reset_activations_energy_vampire(&mut self) {
    self.activations_energy_vampire = None;
  }

  pub fn set_activations_energy_weapon(&mut self, activations_energy_weapon: i64) {
    self.activations_energy_weapon = Some(activations_energy_weapon);
  }

  pub fn with_activations_energy_weapon(mut self, activations_energy_weapon: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_energy_weapon = Some(activations_energy_weapon);
    self
  }

  pub fn activations_energy_weapon(&self) -> Option<&i64> {
    self.activations_energy_weapon.as_ref()
  }

  pub fn reset_activations_energy_weapon(&mut self) {
    self.activations_energy_weapon = None;
  }

  pub fn set_activations_festival_launcher(&mut self, activations_festival_launcher: i64) {
    self.activations_festival_launcher = Some(activations_festival_launcher);
  }

  pub fn with_activations_festival_launcher(mut self, activations_festival_launcher: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_festival_launcher = Some(activations_festival_launcher);
    self
  }

  pub fn activations_festival_launcher(&self) -> Option<&i64> {
    self.activations_festival_launcher.as_ref()
  }

  pub fn reset_activations_festival_launcher(&mut self) {
    self.activations_festival_launcher = None;
  }

  pub fn set_activations_frequency_mining_laser(&mut self, activations_frequency_mining_laser: i64) {
    self.activations_frequency_mining_laser = Some(activations_frequency_mining_laser);
  }

  pub fn with_activations_frequency_mining_laser(mut self, activations_frequency_mining_laser: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_frequency_mining_laser = Some(activations_frequency_mining_laser);
    self
  }

  pub fn activations_frequency_mining_laser(&self) -> Option<&i64> {
    self.activations_frequency_mining_laser.as_ref()
  }

  pub fn reset_activations_frequency_mining_laser(&mut self) {
    self.activations_frequency_mining_laser = None;
  }

  pub fn set_activations_fueled_armor_repairer(&mut self, activations_fueled_armor_repairer: i64) {
    self.activations_fueled_armor_repairer = Some(activations_fueled_armor_repairer);
  }

  pub fn with_activations_fueled_armor_repairer(mut self, activations_fueled_armor_repairer: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_fueled_armor_repairer = Some(activations_fueled_armor_repairer);
    self
  }

  pub fn activations_fueled_armor_repairer(&self) -> Option<&i64> {
    self.activations_fueled_armor_repairer.as_ref()
  }

  pub fn reset_activations_fueled_armor_repairer(&mut self) {
    self.activations_fueled_armor_repairer = None;
  }

  pub fn set_activations_fueled_shield_booster(&mut self, activations_fueled_shield_booster: i64) {
    self.activations_fueled_shield_booster = Some(activations_fueled_shield_booster);
  }

  pub fn with_activations_fueled_shield_booster(mut self, activations_fueled_shield_booster: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_fueled_shield_booster = Some(activations_fueled_shield_booster);
    self
  }

  pub fn activations_fueled_shield_booster(&self) -> Option<&i64> {
    self.activations_fueled_shield_booster.as_ref()
  }

  pub fn reset_activations_fueled_shield_booster(&mut self) {
    self.activations_fueled_shield_booster = None;
  }

  pub fn set_activations_gang_coordinator(&mut self, activations_gang_coordinator: i64) {
    self.activations_gang_coordinator = Some(activations_gang_coordinator);
  }

  pub fn with_activations_gang_coordinator(mut self, activations_gang_coordinator: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_gang_coordinator = Some(activations_gang_coordinator);
    self
  }

  pub fn activations_gang_coordinator(&self) -> Option<&i64> {
    self.activations_gang_coordinator.as_ref()
  }

  pub fn reset_activations_gang_coordinator(&mut self) {
    self.activations_gang_coordinator = None;
  }

  pub fn set_activations_gas_cloud_harvester(&mut self, activations_gas_cloud_harvester: i64) {
    self.activations_gas_cloud_harvester = Some(activations_gas_cloud_harvester);
  }

  pub fn with_activations_gas_cloud_harvester(mut self, activations_gas_cloud_harvester: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_gas_cloud_harvester = Some(activations_gas_cloud_harvester);
    self
  }

  pub fn activations_gas_cloud_harvester(&self) -> Option<&i64> {
    self.activations_gas_cloud_harvester.as_ref()
  }

  pub fn reset_activations_gas_cloud_harvester(&mut self) {
    self.activations_gas_cloud_harvester = None;
  }

  pub fn set_activations_hull_repair_unit(&mut self, activations_hull_repair_unit: i64) {
    self.activations_hull_repair_unit = Some(activations_hull_repair_unit);
  }

  pub fn with_activations_hull_repair_unit(mut self, activations_hull_repair_unit: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_hull_repair_unit = Some(activations_hull_repair_unit);
    self
  }

  pub fn activations_hull_repair_unit(&self) -> Option<&i64> {
    self.activations_hull_repair_unit.as_ref()
  }

  pub fn reset_activations_hull_repair_unit(&mut self) {
    self.activations_hull_repair_unit = None;
  }

  pub fn set_activations_hybrid_weapon(&mut self, activations_hybrid_weapon: i64) {
    self.activations_hybrid_weapon = Some(activations_hybrid_weapon);
  }

  pub fn with_activations_hybrid_weapon(mut self, activations_hybrid_weapon: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_hybrid_weapon = Some(activations_hybrid_weapon);
    self
  }

  pub fn activations_hybrid_weapon(&self) -> Option<&i64> {
    self.activations_hybrid_weapon.as_ref()
  }

  pub fn reset_activations_hybrid_weapon(&mut self) {
    self.activations_hybrid_weapon = None;
  }

  pub fn set_activations_industrial_core(&mut self, activations_industrial_core: i64) {
    self.activations_industrial_core = Some(activations_industrial_core);
  }

  pub fn with_activations_industrial_core(mut self, activations_industrial_core: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_industrial_core = Some(activations_industrial_core);
    self
  }

  pub fn activations_industrial_core(&self) -> Option<&i64> {
    self.activations_industrial_core.as_ref()
  }

  pub fn reset_activations_industrial_core(&mut self) {
    self.activations_industrial_core = None;
  }

  pub fn set_activations_interdiction_sphere_launcher(&mut self, activations_interdiction_sphere_launcher: i64) {
    self.activations_interdiction_sphere_launcher = Some(activations_interdiction_sphere_launcher);
  }

  pub fn with_activations_interdiction_sphere_launcher(mut self, activations_interdiction_sphere_launcher: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_interdiction_sphere_launcher = Some(activations_interdiction_sphere_launcher);
    self
  }

  pub fn activations_interdiction_sphere_launcher(&self) -> Option<&i64> {
    self.activations_interdiction_sphere_launcher.as_ref()
  }

  pub fn reset_activations_interdiction_sphere_launcher(&mut self) {
    self.activations_interdiction_sphere_launcher = None;
  }

  pub fn set_activations_micro_jump_drive(&mut self, activations_micro_jump_drive: i64) {
    self.activations_micro_jump_drive = Some(activations_micro_jump_drive);
  }

  pub fn with_activations_micro_jump_drive(mut self, activations_micro_jump_drive: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_micro_jump_drive = Some(activations_micro_jump_drive);
    self
  }

  pub fn activations_micro_jump_drive(&self) -> Option<&i64> {
    self.activations_micro_jump_drive.as_ref()
  }

  pub fn reset_activations_micro_jump_drive(&mut self) {
    self.activations_micro_jump_drive = None;
  }

  pub fn set_activations_mining_laser(&mut self, activations_mining_laser: i64) {
    self.activations_mining_laser = Some(activations_mining_laser);
  }

  pub fn with_activations_mining_laser(mut self, activations_mining_laser: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_mining_laser = Some(activations_mining_laser);
    self
  }

  pub fn activations_mining_laser(&self) -> Option<&i64> {
    self.activations_mining_laser.as_ref()
  }

  pub fn reset_activations_mining_laser(&mut self) {
    self.activations_mining_laser = None;
  }

  pub fn set_activations_missile_launcher(&mut self, activations_missile_launcher: i64) {
    self.activations_missile_launcher = Some(activations_missile_launcher);
  }

  pub fn with_activations_missile_launcher(mut self, activations_missile_launcher: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_missile_launcher = Some(activations_missile_launcher);
    self
  }

  pub fn activations_missile_launcher(&self) -> Option<&i64> {
    self.activations_missile_launcher.as_ref()
  }

  pub fn reset_activations_missile_launcher(&mut self) {
    self.activations_missile_launcher = None;
  }

  pub fn set_activations_passive_targeting_system(&mut self, activations_passive_targeting_system: i64) {
    self.activations_passive_targeting_system = Some(activations_passive_targeting_system);
  }

  pub fn with_activations_passive_targeting_system(mut self, activations_passive_targeting_system: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_passive_targeting_system = Some(activations_passive_targeting_system);
    self
  }

  pub fn activations_passive_targeting_system(&self) -> Option<&i64> {
    self.activations_passive_targeting_system.as_ref()
  }

  pub fn reset_activations_passive_targeting_system(&mut self) {
    self.activations_passive_targeting_system = None;
  }

  pub fn set_activations_probe_launcher(&mut self, activations_probe_launcher: i64) {
    self.activations_probe_launcher = Some(activations_probe_launcher);
  }

  pub fn with_activations_probe_launcher(mut self, activations_probe_launcher: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_probe_launcher = Some(activations_probe_launcher);
    self
  }

  pub fn activations_probe_launcher(&self) -> Option<&i64> {
    self.activations_probe_launcher.as_ref()
  }

  pub fn reset_activations_probe_launcher(&mut self) {
    self.activations_probe_launcher = None;
  }

  pub fn set_activations_projected_eccm(&mut self, activations_projected_eccm: i64) {
    self.activations_projected_eccm = Some(activations_projected_eccm);
  }

  pub fn with_activations_projected_eccm(mut self, activations_projected_eccm: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_projected_eccm = Some(activations_projected_eccm);
    self
  }

  pub fn activations_projected_eccm(&self) -> Option<&i64> {
    self.activations_projected_eccm.as_ref()
  }

  pub fn reset_activations_projected_eccm(&mut self) {
    self.activations_projected_eccm = None;
  }

  pub fn set_activations_projectile_weapon(&mut self, activations_projectile_weapon: i64) {
    self.activations_projectile_weapon = Some(activations_projectile_weapon);
  }

  pub fn with_activations_projectile_weapon(mut self, activations_projectile_weapon: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_projectile_weapon = Some(activations_projectile_weapon);
    self
  }

  pub fn activations_projectile_weapon(&self) -> Option<&i64> {
    self.activations_projectile_weapon.as_ref()
  }

  pub fn reset_activations_projectile_weapon(&mut self) {
    self.activations_projectile_weapon = None;
  }

  pub fn set_activations_propulsion_module(&mut self, activations_propulsion_module: i64) {
    self.activations_propulsion_module = Some(activations_propulsion_module);
  }

  pub fn with_activations_propulsion_module(mut self, activations_propulsion_module: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_propulsion_module = Some(activations_propulsion_module);
    self
  }

  pub fn activations_propulsion_module(&self) -> Option<&i64> {
    self.activations_propulsion_module.as_ref()
  }

  pub fn reset_activations_propulsion_module(&mut self) {
    self.activations_propulsion_module = None;
  }

  pub fn set_activations_remote_armor_repairer(&mut self, activations_remote_armor_repairer: i64) {
    self.activations_remote_armor_repairer = Some(activations_remote_armor_repairer);
  }

  pub fn with_activations_remote_armor_repairer(mut self, activations_remote_armor_repairer: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_remote_armor_repairer = Some(activations_remote_armor_repairer);
    self
  }

  pub fn activations_remote_armor_repairer(&self) -> Option<&i64> {
    self.activations_remote_armor_repairer.as_ref()
  }

  pub fn reset_activations_remote_armor_repairer(&mut self) {
    self.activations_remote_armor_repairer = None;
  }

  pub fn set_activations_remote_capacitor_transmitter(&mut self, activations_remote_capacitor_transmitter: i64) {
    self.activations_remote_capacitor_transmitter = Some(activations_remote_capacitor_transmitter);
  }

  pub fn with_activations_remote_capacitor_transmitter(mut self, activations_remote_capacitor_transmitter: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_remote_capacitor_transmitter = Some(activations_remote_capacitor_transmitter);
    self
  }

  pub fn activations_remote_capacitor_transmitter(&self) -> Option<&i64> {
    self.activations_remote_capacitor_transmitter.as_ref()
  }

  pub fn reset_activations_remote_capacitor_transmitter(&mut self) {
    self.activations_remote_capacitor_transmitter = None;
  }

  pub fn set_activations_remote_ecm_burst(&mut self, activations_remote_ecm_burst: i64) {
    self.activations_remote_ecm_burst = Some(activations_remote_ecm_burst);
  }

  pub fn with_activations_remote_ecm_burst(mut self, activations_remote_ecm_burst: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_remote_ecm_burst = Some(activations_remote_ecm_burst);
    self
  }

  pub fn activations_remote_ecm_burst(&self) -> Option<&i64> {
    self.activations_remote_ecm_burst.as_ref()
  }

  pub fn reset_activations_remote_ecm_burst(&mut self) {
    self.activations_remote_ecm_burst = None;
  }

  pub fn set_activations_remote_hull_repairer(&mut self, activations_remote_hull_repairer: i64) {
    self.activations_remote_hull_repairer = Some(activations_remote_hull_repairer);
  }

  pub fn with_activations_remote_hull_repairer(mut self, activations_remote_hull_repairer: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_remote_hull_repairer = Some(activations_remote_hull_repairer);
    self
  }

  pub fn activations_remote_hull_repairer(&self) -> Option<&i64> {
    self.activations_remote_hull_repairer.as_ref()
  }

  pub fn reset_activations_remote_hull_repairer(&mut self) {
    self.activations_remote_hull_repairer = None;
  }

  pub fn set_activations_remote_sensor_booster(&mut self, activations_remote_sensor_booster: i64) {
    self.activations_remote_sensor_booster = Some(activations_remote_sensor_booster);
  }

  pub fn with_activations_remote_sensor_booster(mut self, activations_remote_sensor_booster: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_remote_sensor_booster = Some(activations_remote_sensor_booster);
    self
  }

  pub fn activations_remote_sensor_booster(&self) -> Option<&i64> {
    self.activations_remote_sensor_booster.as_ref()
  }

  pub fn reset_activations_remote_sensor_booster(&mut self) {
    self.activations_remote_sensor_booster = None;
  }

  pub fn set_activations_remote_sensor_damper(&mut self, activations_remote_sensor_damper: i64) {
    self.activations_remote_sensor_damper = Some(activations_remote_sensor_damper);
  }

  pub fn with_activations_remote_sensor_damper(mut self, activations_remote_sensor_damper: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_remote_sensor_damper = Some(activations_remote_sensor_damper);
    self
  }

  pub fn activations_remote_sensor_damper(&self) -> Option<&i64> {
    self.activations_remote_sensor_damper.as_ref()
  }

  pub fn reset_activations_remote_sensor_damper(&mut self) {
    self.activations_remote_sensor_damper = None;
  }

  pub fn set_activations_remote_shield_booster(&mut self, activations_remote_shield_booster: i64) {
    self.activations_remote_shield_booster = Some(activations_remote_shield_booster);
  }

  pub fn with_activations_remote_shield_booster(mut self, activations_remote_shield_booster: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_remote_shield_booster = Some(activations_remote_shield_booster);
    self
  }

  pub fn activations_remote_shield_booster(&self) -> Option<&i64> {
    self.activations_remote_shield_booster.as_ref()
  }

  pub fn reset_activations_remote_shield_booster(&mut self) {
    self.activations_remote_shield_booster = None;
  }

  pub fn set_activations_remote_tracking_computer(&mut self, activations_remote_tracking_computer: i64) {
    self.activations_remote_tracking_computer = Some(activations_remote_tracking_computer);
  }

  pub fn with_activations_remote_tracking_computer(mut self, activations_remote_tracking_computer: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_remote_tracking_computer = Some(activations_remote_tracking_computer);
    self
  }

  pub fn activations_remote_tracking_computer(&self) -> Option<&i64> {
    self.activations_remote_tracking_computer.as_ref()
  }

  pub fn reset_activations_remote_tracking_computer(&mut self) {
    self.activations_remote_tracking_computer = None;
  }

  pub fn set_activations_salvager(&mut self, activations_salvager: i64) {
    self.activations_salvager = Some(activations_salvager);
  }

  pub fn with_activations_salvager(mut self, activations_salvager: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_salvager = Some(activations_salvager);
    self
  }

  pub fn activations_salvager(&self) -> Option<&i64> {
    self.activations_salvager.as_ref()
  }

  pub fn reset_activations_salvager(&mut self) {
    self.activations_salvager = None;
  }

  pub fn set_activations_sensor_booster(&mut self, activations_sensor_booster: i64) {
    self.activations_sensor_booster = Some(activations_sensor_booster);
  }

  pub fn with_activations_sensor_booster(mut self, activations_sensor_booster: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_sensor_booster = Some(activations_sensor_booster);
    self
  }

  pub fn activations_sensor_booster(&self) -> Option<&i64> {
    self.activations_sensor_booster.as_ref()
  }

  pub fn reset_activations_sensor_booster(&mut self) {
    self.activations_sensor_booster = None;
  }

  pub fn set_activations_shield_booster(&mut self, activations_shield_booster: i64) {
    self.activations_shield_booster = Some(activations_shield_booster);
  }

  pub fn with_activations_shield_booster(mut self, activations_shield_booster: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_shield_booster = Some(activations_shield_booster);
    self
  }

  pub fn activations_shield_booster(&self) -> Option<&i64> {
    self.activations_shield_booster.as_ref()
  }

  pub fn reset_activations_shield_booster(&mut self) {
    self.activations_shield_booster = None;
  }

  pub fn set_activations_shield_hardener(&mut self, activations_shield_hardener: i64) {
    self.activations_shield_hardener = Some(activations_shield_hardener);
  }

  pub fn with_activations_shield_hardener(mut self, activations_shield_hardener: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_shield_hardener = Some(activations_shield_hardener);
    self
  }

  pub fn activations_shield_hardener(&self) -> Option<&i64> {
    self.activations_shield_hardener.as_ref()
  }

  pub fn reset_activations_shield_hardener(&mut self) {
    self.activations_shield_hardener = None;
  }

  pub fn set_activations_ship_scanner(&mut self, activations_ship_scanner: i64) {
    self.activations_ship_scanner = Some(activations_ship_scanner);
  }

  pub fn with_activations_ship_scanner(mut self, activations_ship_scanner: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_ship_scanner = Some(activations_ship_scanner);
    self
  }

  pub fn activations_ship_scanner(&self) -> Option<&i64> {
    self.activations_ship_scanner.as_ref()
  }

  pub fn reset_activations_ship_scanner(&mut self) {
    self.activations_ship_scanner = None;
  }

  pub fn set_activations_siege(&mut self, activations_siege: i64) {
    self.activations_siege = Some(activations_siege);
  }

  pub fn with_activations_siege(mut self, activations_siege: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_siege = Some(activations_siege);
    self
  }

  pub fn activations_siege(&self) -> Option<&i64> {
    self.activations_siege.as_ref()
  }

  pub fn reset_activations_siege(&mut self) {
    self.activations_siege = None;
  }

  pub fn set_activations_smart_bomb(&mut self, activations_smart_bomb: i64) {
    self.activations_smart_bomb = Some(activations_smart_bomb);
  }

  pub fn with_activations_smart_bomb(mut self, activations_smart_bomb: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_smart_bomb = Some(activations_smart_bomb);
    self
  }

  pub fn activations_smart_bomb(&self) -> Option<&i64> {
    self.activations_smart_bomb.as_ref()
  }

  pub fn reset_activations_smart_bomb(&mut self) {
    self.activations_smart_bomb = None;
  }

  pub fn set_activations_stasis_web(&mut self, activations_stasis_web: i64) {
    self.activations_stasis_web = Some(activations_stasis_web);
  }

  pub fn with_activations_stasis_web(mut self, activations_stasis_web: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_stasis_web = Some(activations_stasis_web);
    self
  }

  pub fn activations_stasis_web(&self) -> Option<&i64> {
    self.activations_stasis_web.as_ref()
  }

  pub fn reset_activations_stasis_web(&mut self) {
    self.activations_stasis_web = None;
  }

  pub fn set_activations_strip_miner(&mut self, activations_strip_miner: i64) {
    self.activations_strip_miner = Some(activations_strip_miner);
  }

  pub fn with_activations_strip_miner(mut self, activations_strip_miner: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_strip_miner = Some(activations_strip_miner);
    self
  }

  pub fn activations_strip_miner(&self) -> Option<&i64> {
    self.activations_strip_miner.as_ref()
  }

  pub fn reset_activations_strip_miner(&mut self) {
    self.activations_strip_miner = None;
  }

  pub fn set_activations_super_weapon(&mut self, activations_super_weapon: i64) {
    self.activations_super_weapon = Some(activations_super_weapon);
  }

  pub fn with_activations_super_weapon(mut self, activations_super_weapon: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_super_weapon = Some(activations_super_weapon);
    self
  }

  pub fn activations_super_weapon(&self) -> Option<&i64> {
    self.activations_super_weapon.as_ref()
  }

  pub fn reset_activations_super_weapon(&mut self) {
    self.activations_super_weapon = None;
  }

  pub fn set_activations_survey_scanner(&mut self, activations_survey_scanner: i64) {
    self.activations_survey_scanner = Some(activations_survey_scanner);
  }

  pub fn with_activations_survey_scanner(mut self, activations_survey_scanner: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_survey_scanner = Some(activations_survey_scanner);
    self
  }

  pub fn activations_survey_scanner(&self) -> Option<&i64> {
    self.activations_survey_scanner.as_ref()
  }

  pub fn reset_activations_survey_scanner(&mut self) {
    self.activations_survey_scanner = None;
  }

  pub fn set_activations_target_breaker(&mut self, activations_target_breaker: i64) {
    self.activations_target_breaker = Some(activations_target_breaker);
  }

  pub fn with_activations_target_breaker(mut self, activations_target_breaker: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_target_breaker = Some(activations_target_breaker);
    self
  }

  pub fn activations_target_breaker(&self) -> Option<&i64> {
    self.activations_target_breaker.as_ref()
  }

  pub fn reset_activations_target_breaker(&mut self) {
    self.activations_target_breaker = None;
  }

  pub fn set_activations_target_painter(&mut self, activations_target_painter: i64) {
    self.activations_target_painter = Some(activations_target_painter);
  }

  pub fn with_activations_target_painter(mut self, activations_target_painter: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_target_painter = Some(activations_target_painter);
    self
  }

  pub fn activations_target_painter(&self) -> Option<&i64> {
    self.activations_target_painter.as_ref()
  }

  pub fn reset_activations_target_painter(&mut self) {
    self.activations_target_painter = None;
  }

  pub fn set_activations_tracking_computer(&mut self, activations_tracking_computer: i64) {
    self.activations_tracking_computer = Some(activations_tracking_computer);
  }

  pub fn with_activations_tracking_computer(mut self, activations_tracking_computer: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_tracking_computer = Some(activations_tracking_computer);
    self
  }

  pub fn activations_tracking_computer(&self) -> Option<&i64> {
    self.activations_tracking_computer.as_ref()
  }

  pub fn reset_activations_tracking_computer(&mut self) {
    self.activations_tracking_computer = None;
  }

  pub fn set_activations_tracking_disruptor(&mut self, activations_tracking_disruptor: i64) {
    self.activations_tracking_disruptor = Some(activations_tracking_disruptor);
  }

  pub fn with_activations_tracking_disruptor(mut self, activations_tracking_disruptor: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_tracking_disruptor = Some(activations_tracking_disruptor);
    self
  }

  pub fn activations_tracking_disruptor(&self) -> Option<&i64> {
    self.activations_tracking_disruptor.as_ref()
  }

  pub fn reset_activations_tracking_disruptor(&mut self) {
    self.activations_tracking_disruptor = None;
  }

  pub fn set_activations_tractor_beam(&mut self, activations_tractor_beam: i64) {
    self.activations_tractor_beam = Some(activations_tractor_beam);
  }

  pub fn with_activations_tractor_beam(mut self, activations_tractor_beam: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_tractor_beam = Some(activations_tractor_beam);
    self
  }

  pub fn activations_tractor_beam(&self) -> Option<&i64> {
    self.activations_tractor_beam.as_ref()
  }

  pub fn reset_activations_tractor_beam(&mut self) {
    self.activations_tractor_beam = None;
  }

  pub fn set_activations_triage(&mut self, activations_triage: i64) {
    self.activations_triage = Some(activations_triage);
  }

  pub fn with_activations_triage(mut self, activations_triage: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_triage = Some(activations_triage);
    self
  }

  pub fn activations_triage(&self) -> Option<&i64> {
    self.activations_triage.as_ref()
  }

  pub fn reset_activations_triage(&mut self) {
    self.activations_triage = None;
  }

  pub fn set_activations_warp_disrupt_field_generator(&mut self, activations_warp_disrupt_field_generator: i64) {
    self.activations_warp_disrupt_field_generator = Some(activations_warp_disrupt_field_generator);
  }

  pub fn with_activations_warp_disrupt_field_generator(mut self, activations_warp_disrupt_field_generator: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_warp_disrupt_field_generator = Some(activations_warp_disrupt_field_generator);
    self
  }

  pub fn activations_warp_disrupt_field_generator(&self) -> Option<&i64> {
    self.activations_warp_disrupt_field_generator.as_ref()
  }

  pub fn reset_activations_warp_disrupt_field_generator(&mut self) {
    self.activations_warp_disrupt_field_generator = None;
  }

  pub fn set_activations_warp_scrambler(&mut self, activations_warp_scrambler: i64) {
    self.activations_warp_scrambler = Some(activations_warp_scrambler);
  }

  pub fn with_activations_warp_scrambler(mut self, activations_warp_scrambler: i64) -> GetCharactersCharacterIdStatsModule {
    self.activations_warp_scrambler = Some(activations_warp_scrambler);
    self
  }

  pub fn activations_warp_scrambler(&self) -> Option<&i64> {
    self.activations_warp_scrambler.as_ref()
  }

  pub fn reset_activations_warp_scrambler(&mut self) {
    self.activations_warp_scrambler = None;
  }

  pub fn set_link_weapons(&mut self, link_weapons: i64) {
    self.link_weapons = Some(link_weapons);
  }

  pub fn with_link_weapons(mut self, link_weapons: i64) -> GetCharactersCharacterIdStatsModule {
    self.link_weapons = Some(link_weapons);
    self
  }

  pub fn link_weapons(&self) -> Option<&i64> {
    self.link_weapons.as_ref()
  }

  pub fn reset_link_weapons(&mut self) {
    self.link_weapons = None;
  }

  pub fn set_overload(&mut self, overload: i64) {
    self.overload = Some(overload);
  }

  pub fn with_overload(mut self, overload: i64) -> GetCharactersCharacterIdStatsModule {
    self.overload = Some(overload);
    self
  }

  pub fn overload(&self) -> Option<&i64> {
    self.overload.as_ref()
  }

  pub fn reset_overload(&mut self) {
    self.overload = None;
  }

  pub fn set_repairs(&mut self, repairs: i64) {
    self.repairs = Some(repairs);
  }

  pub fn with_repairs(mut self, repairs: i64) -> GetCharactersCharacterIdStatsModule {
    self.repairs = Some(repairs);
    self
  }

  pub fn repairs(&self) -> Option<&i64> {
    self.repairs.as_ref()
  }

  pub fn reset_repairs(&mut self) {
    self.repairs = None;
  }

}



