/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdStats200Ok : Aggregate stats for a year

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdStats200Ok {
  #[serde(rename = "character")]
  character: Option<::models::GetCharactersCharacterIdStatsCharacter>,
  #[serde(rename = "combat")]
  combat: Option<::models::GetCharactersCharacterIdStatsCombat>,
  #[serde(rename = "industry")]
  industry: Option<::models::GetCharactersCharacterIdStatsIndustry>,
  #[serde(rename = "inventory")]
  inventory: Option<::models::GetCharactersCharacterIdStatsInventory>,
  #[serde(rename = "isk")]
  isk: Option<::models::GetCharactersCharacterIdStatsIsk>,
  #[serde(rename = "market")]
  market: Option<::models::GetCharactersCharacterIdStatsMarket>,
  #[serde(rename = "mining")]
  mining: Option<::models::GetCharactersCharacterIdStatsMining>,
  #[serde(rename = "module")]
  module: Option<::models::GetCharactersCharacterIdStatsModule>,
  #[serde(rename = "orbital")]
  orbital: Option<::models::GetCharactersCharacterIdStatsOrbital>,
  #[serde(rename = "pve")]
  pve: Option<::models::GetCharactersCharacterIdStatsPve>,
  #[serde(rename = "social")]
  social: Option<::models::GetCharactersCharacterIdStatsSocial>,
  #[serde(rename = "travel")]
  travel: Option<::models::GetCharactersCharacterIdStatsTravel>,
  /// Gregorian year for this set of aggregates
  #[serde(rename = "year")]
  year: i32
}

impl GetCharactersCharacterIdStats200Ok {
  /// Aggregate stats for a year
  pub fn new(year: i32) -> GetCharactersCharacterIdStats200Ok {
    GetCharactersCharacterIdStats200Ok {
      character: None,
      combat: None,
      industry: None,
      inventory: None,
      isk: None,
      market: None,
      mining: None,
      module: None,
      orbital: None,
      pve: None,
      social: None,
      travel: None,
      year: year
    }
  }

  pub fn set_character(&mut self, character: ::models::GetCharactersCharacterIdStatsCharacter) {
    self.character = Some(character);
  }

  pub fn with_character(mut self, character: ::models::GetCharactersCharacterIdStatsCharacter) -> GetCharactersCharacterIdStats200Ok {
    self.character = Some(character);
    self
  }

  pub fn character(&self) -> Option<&::models::GetCharactersCharacterIdStatsCharacter> {
    self.character.as_ref()
  }

  pub fn reset_character(&mut self) {
    self.character = None;
  }

  pub fn set_combat(&mut self, combat: ::models::GetCharactersCharacterIdStatsCombat) {
    self.combat = Some(combat);
  }

  pub fn with_combat(mut self, combat: ::models::GetCharactersCharacterIdStatsCombat) -> GetCharactersCharacterIdStats200Ok {
    self.combat = Some(combat);
    self
  }

  pub fn combat(&self) -> Option<&::models::GetCharactersCharacterIdStatsCombat> {
    self.combat.as_ref()
  }

  pub fn reset_combat(&mut self) {
    self.combat = None;
  }

  pub fn set_industry(&mut self, industry: ::models::GetCharactersCharacterIdStatsIndustry) {
    self.industry = Some(industry);
  }

  pub fn with_industry(mut self, industry: ::models::GetCharactersCharacterIdStatsIndustry) -> GetCharactersCharacterIdStats200Ok {
    self.industry = Some(industry);
    self
  }

  pub fn industry(&self) -> Option<&::models::GetCharactersCharacterIdStatsIndustry> {
    self.industry.as_ref()
  }

  pub fn reset_industry(&mut self) {
    self.industry = None;
  }

  pub fn set_inventory(&mut self, inventory: ::models::GetCharactersCharacterIdStatsInventory) {
    self.inventory = Some(inventory);
  }

  pub fn with_inventory(mut self, inventory: ::models::GetCharactersCharacterIdStatsInventory) -> GetCharactersCharacterIdStats200Ok {
    self.inventory = Some(inventory);
    self
  }

  pub fn inventory(&self) -> Option<&::models::GetCharactersCharacterIdStatsInventory> {
    self.inventory.as_ref()
  }

  pub fn reset_inventory(&mut self) {
    self.inventory = None;
  }

  pub fn set_isk(&mut self, isk: ::models::GetCharactersCharacterIdStatsIsk) {
    self.isk = Some(isk);
  }

  pub fn with_isk(mut self, isk: ::models::GetCharactersCharacterIdStatsIsk) -> GetCharactersCharacterIdStats200Ok {
    self.isk = Some(isk);
    self
  }

  pub fn isk(&self) -> Option<&::models::GetCharactersCharacterIdStatsIsk> {
    self.isk.as_ref()
  }

  pub fn reset_isk(&mut self) {
    self.isk = None;
  }

  pub fn set_market(&mut self, market: ::models::GetCharactersCharacterIdStatsMarket) {
    self.market = Some(market);
  }

  pub fn with_market(mut self, market: ::models::GetCharactersCharacterIdStatsMarket) -> GetCharactersCharacterIdStats200Ok {
    self.market = Some(market);
    self
  }

  pub fn market(&self) -> Option<&::models::GetCharactersCharacterIdStatsMarket> {
    self.market.as_ref()
  }

  pub fn reset_market(&mut self) {
    self.market = None;
  }

  pub fn set_mining(&mut self, mining: ::models::GetCharactersCharacterIdStatsMining) {
    self.mining = Some(mining);
  }

  pub fn with_mining(mut self, mining: ::models::GetCharactersCharacterIdStatsMining) -> GetCharactersCharacterIdStats200Ok {
    self.mining = Some(mining);
    self
  }

  pub fn mining(&self) -> Option<&::models::GetCharactersCharacterIdStatsMining> {
    self.mining.as_ref()
  }

  pub fn reset_mining(&mut self) {
    self.mining = None;
  }

  pub fn set_module(&mut self, module: ::models::GetCharactersCharacterIdStatsModule) {
    self.module = Some(module);
  }

  pub fn with_module(mut self, module: ::models::GetCharactersCharacterIdStatsModule) -> GetCharactersCharacterIdStats200Ok {
    self.module = Some(module);
    self
  }

  pub fn module(&self) -> Option<&::models::GetCharactersCharacterIdStatsModule> {
    self.module.as_ref()
  }

  pub fn reset_module(&mut self) {
    self.module = None;
  }

  pub fn set_orbital(&mut self, orbital: ::models::GetCharactersCharacterIdStatsOrbital) {
    self.orbital = Some(orbital);
  }

  pub fn with_orbital(mut self, orbital: ::models::GetCharactersCharacterIdStatsOrbital) -> GetCharactersCharacterIdStats200Ok {
    self.orbital = Some(orbital);
    self
  }

  pub fn orbital(&self) -> Option<&::models::GetCharactersCharacterIdStatsOrbital> {
    self.orbital.as_ref()
  }

  pub fn reset_orbital(&mut self) {
    self.orbital = None;
  }

  pub fn set_pve(&mut self, pve: ::models::GetCharactersCharacterIdStatsPve) {
    self.pve = Some(pve);
  }

  pub fn with_pve(mut self, pve: ::models::GetCharactersCharacterIdStatsPve) -> GetCharactersCharacterIdStats200Ok {
    self.pve = Some(pve);
    self
  }

  pub fn pve(&self) -> Option<&::models::GetCharactersCharacterIdStatsPve> {
    self.pve.as_ref()
  }

  pub fn reset_pve(&mut self) {
    self.pve = None;
  }

  pub fn set_social(&mut self, social: ::models::GetCharactersCharacterIdStatsSocial) {
    self.social = Some(social);
  }

  pub fn with_social(mut self, social: ::models::GetCharactersCharacterIdStatsSocial) -> GetCharactersCharacterIdStats200Ok {
    self.social = Some(social);
    self
  }

  pub fn social(&self) -> Option<&::models::GetCharactersCharacterIdStatsSocial> {
    self.social.as_ref()
  }

  pub fn reset_social(&mut self) {
    self.social = None;
  }

  pub fn set_travel(&mut self, travel: ::models::GetCharactersCharacterIdStatsTravel) {
    self.travel = Some(travel);
  }

  pub fn with_travel(mut self, travel: ::models::GetCharactersCharacterIdStatsTravel) -> GetCharactersCharacterIdStats200Ok {
    self.travel = Some(travel);
    self
  }

  pub fn travel(&self) -> Option<&::models::GetCharactersCharacterIdStatsTravel> {
    self.travel.as_ref()
  }

  pub fn reset_travel(&mut self) {
    self.travel = None;
  }

  pub fn set_year(&mut self, year: i32) {
    self.year = year;
  }

  pub fn with_year(mut self, year: i32) -> GetCharactersCharacterIdStats200Ok {
    self.year = year;
    self
  }

  pub fn year(&self) -> &i32 {
    &self.year
  }


}



