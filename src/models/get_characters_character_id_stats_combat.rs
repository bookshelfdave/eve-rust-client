/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdStatsCombat : combat object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdStatsCombat {
  /// cap_drainedby_npc integer
  #[serde(rename = "cap_drainedby_npc")]
  cap_drainedby_npc: Option<i64>,
  /// cap_drainedby_pc integer
  #[serde(rename = "cap_drainedby_pc")]
  cap_drainedby_pc: Option<i64>,
  /// cap_draining_pc integer
  #[serde(rename = "cap_draining_pc")]
  cap_draining_pc: Option<i64>,
  /// criminal_flag_set integer
  #[serde(rename = "criminal_flag_set")]
  criminal_flag_set: Option<i64>,
  /// damage_from_np_cs_amount integer
  #[serde(rename = "damage_from_np_cs_amount")]
  damage_from_np_cs_amount: Option<i64>,
  /// damage_from_np_cs_num_shots integer
  #[serde(rename = "damage_from_np_cs_num_shots")]
  damage_from_np_cs_num_shots: Option<i64>,
  /// damage_from_players_bomb_amount integer
  #[serde(rename = "damage_from_players_bomb_amount")]
  damage_from_players_bomb_amount: Option<i64>,
  /// damage_from_players_bomb_num_shots integer
  #[serde(rename = "damage_from_players_bomb_num_shots")]
  damage_from_players_bomb_num_shots: Option<i64>,
  /// damage_from_players_combat_drone_amount integer
  #[serde(rename = "damage_from_players_combat_drone_amount")]
  damage_from_players_combat_drone_amount: Option<i64>,
  /// damage_from_players_combat_drone_num_shots integer
  #[serde(rename = "damage_from_players_combat_drone_num_shots")]
  damage_from_players_combat_drone_num_shots: Option<i64>,
  /// damage_from_players_energy_amount integer
  #[serde(rename = "damage_from_players_energy_amount")]
  damage_from_players_energy_amount: Option<i64>,
  /// damage_from_players_energy_num_shots integer
  #[serde(rename = "damage_from_players_energy_num_shots")]
  damage_from_players_energy_num_shots: Option<i64>,
  /// damage_from_players_fighter_bomber_amount integer
  #[serde(rename = "damage_from_players_fighter_bomber_amount")]
  damage_from_players_fighter_bomber_amount: Option<i64>,
  /// damage_from_players_fighter_bomber_num_shots integer
  #[serde(rename = "damage_from_players_fighter_bomber_num_shots")]
  damage_from_players_fighter_bomber_num_shots: Option<i64>,
  /// damage_from_players_fighter_drone_amount integer
  #[serde(rename = "damage_from_players_fighter_drone_amount")]
  damage_from_players_fighter_drone_amount: Option<i64>,
  /// damage_from_players_fighter_drone_num_shots integer
  #[serde(rename = "damage_from_players_fighter_drone_num_shots")]
  damage_from_players_fighter_drone_num_shots: Option<i64>,
  /// damage_from_players_hybrid_amount integer
  #[serde(rename = "damage_from_players_hybrid_amount")]
  damage_from_players_hybrid_amount: Option<i64>,
  /// damage_from_players_hybrid_num_shots integer
  #[serde(rename = "damage_from_players_hybrid_num_shots")]
  damage_from_players_hybrid_num_shots: Option<i64>,
  /// damage_from_players_missile_amount integer
  #[serde(rename = "damage_from_players_missile_amount")]
  damage_from_players_missile_amount: Option<i64>,
  /// damage_from_players_missile_num_shots integer
  #[serde(rename = "damage_from_players_missile_num_shots")]
  damage_from_players_missile_num_shots: Option<i64>,
  /// damage_from_players_projectile_amount integer
  #[serde(rename = "damage_from_players_projectile_amount")]
  damage_from_players_projectile_amount: Option<i64>,
  /// damage_from_players_projectile_num_shots integer
  #[serde(rename = "damage_from_players_projectile_num_shots")]
  damage_from_players_projectile_num_shots: Option<i64>,
  /// damage_from_players_smart_bomb_amount integer
  #[serde(rename = "damage_from_players_smart_bomb_amount")]
  damage_from_players_smart_bomb_amount: Option<i64>,
  /// damage_from_players_smart_bomb_num_shots integer
  #[serde(rename = "damage_from_players_smart_bomb_num_shots")]
  damage_from_players_smart_bomb_num_shots: Option<i64>,
  /// damage_from_players_super_amount integer
  #[serde(rename = "damage_from_players_super_amount")]
  damage_from_players_super_amount: Option<i64>,
  /// damage_from_players_super_num_shots integer
  #[serde(rename = "damage_from_players_super_num_shots")]
  damage_from_players_super_num_shots: Option<i64>,
  /// damage_from_structures_total_amount integer
  #[serde(rename = "damage_from_structures_total_amount")]
  damage_from_structures_total_amount: Option<i64>,
  /// damage_from_structures_total_num_shots integer
  #[serde(rename = "damage_from_structures_total_num_shots")]
  damage_from_structures_total_num_shots: Option<i64>,
  /// damage_to_players_bomb_amount integer
  #[serde(rename = "damage_to_players_bomb_amount")]
  damage_to_players_bomb_amount: Option<i64>,
  /// damage_to_players_bomb_num_shots integer
  #[serde(rename = "damage_to_players_bomb_num_shots")]
  damage_to_players_bomb_num_shots: Option<i64>,
  /// damage_to_players_combat_drone_amount integer
  #[serde(rename = "damage_to_players_combat_drone_amount")]
  damage_to_players_combat_drone_amount: Option<i64>,
  /// damage_to_players_combat_drone_num_shots integer
  #[serde(rename = "damage_to_players_combat_drone_num_shots")]
  damage_to_players_combat_drone_num_shots: Option<i64>,
  /// damage_to_players_energy_amount integer
  #[serde(rename = "damage_to_players_energy_amount")]
  damage_to_players_energy_amount: Option<i64>,
  /// damage_to_players_energy_num_shots integer
  #[serde(rename = "damage_to_players_energy_num_shots")]
  damage_to_players_energy_num_shots: Option<i64>,
  /// damage_to_players_fighter_bomber_amount integer
  #[serde(rename = "damage_to_players_fighter_bomber_amount")]
  damage_to_players_fighter_bomber_amount: Option<i64>,
  /// damage_to_players_fighter_bomber_num_shots integer
  #[serde(rename = "damage_to_players_fighter_bomber_num_shots")]
  damage_to_players_fighter_bomber_num_shots: Option<i64>,
  /// damage_to_players_fighter_drone_amount integer
  #[serde(rename = "damage_to_players_fighter_drone_amount")]
  damage_to_players_fighter_drone_amount: Option<i64>,
  /// damage_to_players_fighter_drone_num_shots integer
  #[serde(rename = "damage_to_players_fighter_drone_num_shots")]
  damage_to_players_fighter_drone_num_shots: Option<i64>,
  /// damage_to_players_hybrid_amount integer
  #[serde(rename = "damage_to_players_hybrid_amount")]
  damage_to_players_hybrid_amount: Option<i64>,
  /// damage_to_players_hybrid_num_shots integer
  #[serde(rename = "damage_to_players_hybrid_num_shots")]
  damage_to_players_hybrid_num_shots: Option<i64>,
  /// damage_to_players_missile_amount integer
  #[serde(rename = "damage_to_players_missile_amount")]
  damage_to_players_missile_amount: Option<i64>,
  /// damage_to_players_missile_num_shots integer
  #[serde(rename = "damage_to_players_missile_num_shots")]
  damage_to_players_missile_num_shots: Option<i64>,
  /// damage_to_players_projectile_amount integer
  #[serde(rename = "damage_to_players_projectile_amount")]
  damage_to_players_projectile_amount: Option<i64>,
  /// damage_to_players_projectile_num_shots integer
  #[serde(rename = "damage_to_players_projectile_num_shots")]
  damage_to_players_projectile_num_shots: Option<i64>,
  /// damage_to_players_smart_bomb_amount integer
  #[serde(rename = "damage_to_players_smart_bomb_amount")]
  damage_to_players_smart_bomb_amount: Option<i64>,
  /// damage_to_players_smart_bomb_num_shots integer
  #[serde(rename = "damage_to_players_smart_bomb_num_shots")]
  damage_to_players_smart_bomb_num_shots: Option<i64>,
  /// damage_to_players_super_amount integer
  #[serde(rename = "damage_to_players_super_amount")]
  damage_to_players_super_amount: Option<i64>,
  /// damage_to_players_super_num_shots integer
  #[serde(rename = "damage_to_players_super_num_shots")]
  damage_to_players_super_num_shots: Option<i64>,
  /// damage_to_structures_total_amount integer
  #[serde(rename = "damage_to_structures_total_amount")]
  damage_to_structures_total_amount: Option<i64>,
  /// damage_to_structures_total_num_shots integer
  #[serde(rename = "damage_to_structures_total_num_shots")]
  damage_to_structures_total_num_shots: Option<i64>,
  /// deaths_high_sec integer
  #[serde(rename = "deaths_high_sec")]
  deaths_high_sec: Option<i64>,
  /// deaths_low_sec integer
  #[serde(rename = "deaths_low_sec")]
  deaths_low_sec: Option<i64>,
  /// deaths_null_sec integer
  #[serde(rename = "deaths_null_sec")]
  deaths_null_sec: Option<i64>,
  /// deaths_pod_high_sec integer
  #[serde(rename = "deaths_pod_high_sec")]
  deaths_pod_high_sec: Option<i64>,
  /// deaths_pod_low_sec integer
  #[serde(rename = "deaths_pod_low_sec")]
  deaths_pod_low_sec: Option<i64>,
  /// deaths_pod_null_sec integer
  #[serde(rename = "deaths_pod_null_sec")]
  deaths_pod_null_sec: Option<i64>,
  /// deaths_pod_wormhole integer
  #[serde(rename = "deaths_pod_wormhole")]
  deaths_pod_wormhole: Option<i64>,
  /// deaths_wormhole integer
  #[serde(rename = "deaths_wormhole")]
  deaths_wormhole: Option<i64>,
  /// drone_engage integer
  #[serde(rename = "drone_engage")]
  drone_engage: Option<i64>,
  /// dscans integer
  #[serde(rename = "dscans")]
  dscans: Option<i64>,
  /// duel_requested integer
  #[serde(rename = "duel_requested")]
  duel_requested: Option<i64>,
  /// engagement_register integer
  #[serde(rename = "engagement_register")]
  engagement_register: Option<i64>,
  /// kills_assists integer
  #[serde(rename = "kills_assists")]
  kills_assists: Option<i64>,
  /// kills_high_sec integer
  #[serde(rename = "kills_high_sec")]
  kills_high_sec: Option<i64>,
  /// kills_low_sec integer
  #[serde(rename = "kills_low_sec")]
  kills_low_sec: Option<i64>,
  /// kills_null_sec integer
  #[serde(rename = "kills_null_sec")]
  kills_null_sec: Option<i64>,
  /// kills_pod_high_sec integer
  #[serde(rename = "kills_pod_high_sec")]
  kills_pod_high_sec: Option<i64>,
  /// kills_pod_low_sec integer
  #[serde(rename = "kills_pod_low_sec")]
  kills_pod_low_sec: Option<i64>,
  /// kills_pod_null_sec integer
  #[serde(rename = "kills_pod_null_sec")]
  kills_pod_null_sec: Option<i64>,
  /// kills_pod_wormhole integer
  #[serde(rename = "kills_pod_wormhole")]
  kills_pod_wormhole: Option<i64>,
  /// kills_wormhole integer
  #[serde(rename = "kills_wormhole")]
  kills_wormhole: Option<i64>,
  /// npc_flag_set integer
  #[serde(rename = "npc_flag_set")]
  npc_flag_set: Option<i64>,
  /// probe_scans integer
  #[serde(rename = "probe_scans")]
  probe_scans: Option<i64>,
  /// pvp_flag_set integer
  #[serde(rename = "pvp_flag_set")]
  pvp_flag_set: Option<i64>,
  /// repair_armor_by_remote_amount integer
  #[serde(rename = "repair_armor_by_remote_amount")]
  repair_armor_by_remote_amount: Option<i64>,
  /// repair_armor_remote_amount integer
  #[serde(rename = "repair_armor_remote_amount")]
  repair_armor_remote_amount: Option<i64>,
  /// repair_armor_self_amount integer
  #[serde(rename = "repair_armor_self_amount")]
  repair_armor_self_amount: Option<i64>,
  /// repair_capacitor_by_remote_amount integer
  #[serde(rename = "repair_capacitor_by_remote_amount")]
  repair_capacitor_by_remote_amount: Option<i64>,
  /// repair_capacitor_remote_amount integer
  #[serde(rename = "repair_capacitor_remote_amount")]
  repair_capacitor_remote_amount: Option<i64>,
  /// repair_capacitor_self_amount integer
  #[serde(rename = "repair_capacitor_self_amount")]
  repair_capacitor_self_amount: Option<i64>,
  /// repair_hull_by_remote_amount integer
  #[serde(rename = "repair_hull_by_remote_amount")]
  repair_hull_by_remote_amount: Option<i64>,
  /// repair_hull_remote_amount integer
  #[serde(rename = "repair_hull_remote_amount")]
  repair_hull_remote_amount: Option<i64>,
  /// repair_hull_self_amount integer
  #[serde(rename = "repair_hull_self_amount")]
  repair_hull_self_amount: Option<i64>,
  /// repair_shield_by_remote_amount integer
  #[serde(rename = "repair_shield_by_remote_amount")]
  repair_shield_by_remote_amount: Option<i64>,
  /// repair_shield_remote_amount integer
  #[serde(rename = "repair_shield_remote_amount")]
  repair_shield_remote_amount: Option<i64>,
  /// repair_shield_self_amount integer
  #[serde(rename = "repair_shield_self_amount")]
  repair_shield_self_amount: Option<i64>,
  /// self_destructs integer
  #[serde(rename = "self_destructs")]
  self_destructs: Option<i64>,
  /// warp_scramble_pc integer
  #[serde(rename = "warp_scramble_pc")]
  warp_scramble_pc: Option<i64>,
  /// warp_scrambledby_npc integer
  #[serde(rename = "warp_scrambledby_npc")]
  warp_scrambledby_npc: Option<i64>,
  /// warp_scrambledby_pc integer
  #[serde(rename = "warp_scrambledby_pc")]
  warp_scrambledby_pc: Option<i64>,
  /// weapon_flag_set integer
  #[serde(rename = "weapon_flag_set")]
  weapon_flag_set: Option<i64>,
  /// webifiedby_npc integer
  #[serde(rename = "webifiedby_npc")]
  webifiedby_npc: Option<i64>,
  /// webifiedby_pc integer
  #[serde(rename = "webifiedby_pc")]
  webifiedby_pc: Option<i64>,
  /// webifying_pc integer
  #[serde(rename = "webifying_pc")]
  webifying_pc: Option<i64>
}

impl GetCharactersCharacterIdStatsCombat {
  /// combat object
  pub fn new() -> GetCharactersCharacterIdStatsCombat {
    GetCharactersCharacterIdStatsCombat {
      cap_drainedby_npc: None,
      cap_drainedby_pc: None,
      cap_draining_pc: None,
      criminal_flag_set: None,
      damage_from_np_cs_amount: None,
      damage_from_np_cs_num_shots: None,
      damage_from_players_bomb_amount: None,
      damage_from_players_bomb_num_shots: None,
      damage_from_players_combat_drone_amount: None,
      damage_from_players_combat_drone_num_shots: None,
      damage_from_players_energy_amount: None,
      damage_from_players_energy_num_shots: None,
      damage_from_players_fighter_bomber_amount: None,
      damage_from_players_fighter_bomber_num_shots: None,
      damage_from_players_fighter_drone_amount: None,
      damage_from_players_fighter_drone_num_shots: None,
      damage_from_players_hybrid_amount: None,
      damage_from_players_hybrid_num_shots: None,
      damage_from_players_missile_amount: None,
      damage_from_players_missile_num_shots: None,
      damage_from_players_projectile_amount: None,
      damage_from_players_projectile_num_shots: None,
      damage_from_players_smart_bomb_amount: None,
      damage_from_players_smart_bomb_num_shots: None,
      damage_from_players_super_amount: None,
      damage_from_players_super_num_shots: None,
      damage_from_structures_total_amount: None,
      damage_from_structures_total_num_shots: None,
      damage_to_players_bomb_amount: None,
      damage_to_players_bomb_num_shots: None,
      damage_to_players_combat_drone_amount: None,
      damage_to_players_combat_drone_num_shots: None,
      damage_to_players_energy_amount: None,
      damage_to_players_energy_num_shots: None,
      damage_to_players_fighter_bomber_amount: None,
      damage_to_players_fighter_bomber_num_shots: None,
      damage_to_players_fighter_drone_amount: None,
      damage_to_players_fighter_drone_num_shots: None,
      damage_to_players_hybrid_amount: None,
      damage_to_players_hybrid_num_shots: None,
      damage_to_players_missile_amount: None,
      damage_to_players_missile_num_shots: None,
      damage_to_players_projectile_amount: None,
      damage_to_players_projectile_num_shots: None,
      damage_to_players_smart_bomb_amount: None,
      damage_to_players_smart_bomb_num_shots: None,
      damage_to_players_super_amount: None,
      damage_to_players_super_num_shots: None,
      damage_to_structures_total_amount: None,
      damage_to_structures_total_num_shots: None,
      deaths_high_sec: None,
      deaths_low_sec: None,
      deaths_null_sec: None,
      deaths_pod_high_sec: None,
      deaths_pod_low_sec: None,
      deaths_pod_null_sec: None,
      deaths_pod_wormhole: None,
      deaths_wormhole: None,
      drone_engage: None,
      dscans: None,
      duel_requested: None,
      engagement_register: None,
      kills_assists: None,
      kills_high_sec: None,
      kills_low_sec: None,
      kills_null_sec: None,
      kills_pod_high_sec: None,
      kills_pod_low_sec: None,
      kills_pod_null_sec: None,
      kills_pod_wormhole: None,
      kills_wormhole: None,
      npc_flag_set: None,
      probe_scans: None,
      pvp_flag_set: None,
      repair_armor_by_remote_amount: None,
      repair_armor_remote_amount: None,
      repair_armor_self_amount: None,
      repair_capacitor_by_remote_amount: None,
      repair_capacitor_remote_amount: None,
      repair_capacitor_self_amount: None,
      repair_hull_by_remote_amount: None,
      repair_hull_remote_amount: None,
      repair_hull_self_amount: None,
      repair_shield_by_remote_amount: None,
      repair_shield_remote_amount: None,
      repair_shield_self_amount: None,
      self_destructs: None,
      warp_scramble_pc: None,
      warp_scrambledby_npc: None,
      warp_scrambledby_pc: None,
      weapon_flag_set: None,
      webifiedby_npc: None,
      webifiedby_pc: None,
      webifying_pc: None
    }
  }

  pub fn set_cap_drainedby_npc(&mut self, cap_drainedby_npc: i64) {
    self.cap_drainedby_npc = Some(cap_drainedby_npc);
  }

  pub fn with_cap_drainedby_npc(mut self, cap_drainedby_npc: i64) -> GetCharactersCharacterIdStatsCombat {
    self.cap_drainedby_npc = Some(cap_drainedby_npc);
    self
  }

  pub fn cap_drainedby_npc(&self) -> Option<&i64> {
    self.cap_drainedby_npc.as_ref()
  }

  pub fn reset_cap_drainedby_npc(&mut self) {
    self.cap_drainedby_npc = None;
  }

  pub fn set_cap_drainedby_pc(&mut self, cap_drainedby_pc: i64) {
    self.cap_drainedby_pc = Some(cap_drainedby_pc);
  }

  pub fn with_cap_drainedby_pc(mut self, cap_drainedby_pc: i64) -> GetCharactersCharacterIdStatsCombat {
    self.cap_drainedby_pc = Some(cap_drainedby_pc);
    self
  }

  pub fn cap_drainedby_pc(&self) -> Option<&i64> {
    self.cap_drainedby_pc.as_ref()
  }

  pub fn reset_cap_drainedby_pc(&mut self) {
    self.cap_drainedby_pc = None;
  }

  pub fn set_cap_draining_pc(&mut self, cap_draining_pc: i64) {
    self.cap_draining_pc = Some(cap_draining_pc);
  }

  pub fn with_cap_draining_pc(mut self, cap_draining_pc: i64) -> GetCharactersCharacterIdStatsCombat {
    self.cap_draining_pc = Some(cap_draining_pc);
    self
  }

  pub fn cap_draining_pc(&self) -> Option<&i64> {
    self.cap_draining_pc.as_ref()
  }

  pub fn reset_cap_draining_pc(&mut self) {
    self.cap_draining_pc = None;
  }

  pub fn set_criminal_flag_set(&mut self, criminal_flag_set: i64) {
    self.criminal_flag_set = Some(criminal_flag_set);
  }

  pub fn with_criminal_flag_set(mut self, criminal_flag_set: i64) -> GetCharactersCharacterIdStatsCombat {
    self.criminal_flag_set = Some(criminal_flag_set);
    self
  }

  pub fn criminal_flag_set(&self) -> Option<&i64> {
    self.criminal_flag_set.as_ref()
  }

  pub fn reset_criminal_flag_set(&mut self) {
    self.criminal_flag_set = None;
  }

  pub fn set_damage_from_np_cs_amount(&mut self, damage_from_np_cs_amount: i64) {
    self.damage_from_np_cs_amount = Some(damage_from_np_cs_amount);
  }

  pub fn with_damage_from_np_cs_amount(mut self, damage_from_np_cs_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_np_cs_amount = Some(damage_from_np_cs_amount);
    self
  }

  pub fn damage_from_np_cs_amount(&self) -> Option<&i64> {
    self.damage_from_np_cs_amount.as_ref()
  }

  pub fn reset_damage_from_np_cs_amount(&mut self) {
    self.damage_from_np_cs_amount = None;
  }

  pub fn set_damage_from_np_cs_num_shots(&mut self, damage_from_np_cs_num_shots: i64) {
    self.damage_from_np_cs_num_shots = Some(damage_from_np_cs_num_shots);
  }

  pub fn with_damage_from_np_cs_num_shots(mut self, damage_from_np_cs_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_np_cs_num_shots = Some(damage_from_np_cs_num_shots);
    self
  }

  pub fn damage_from_np_cs_num_shots(&self) -> Option<&i64> {
    self.damage_from_np_cs_num_shots.as_ref()
  }

  pub fn reset_damage_from_np_cs_num_shots(&mut self) {
    self.damage_from_np_cs_num_shots = None;
  }

  pub fn set_damage_from_players_bomb_amount(&mut self, damage_from_players_bomb_amount: i64) {
    self.damage_from_players_bomb_amount = Some(damage_from_players_bomb_amount);
  }

  pub fn with_damage_from_players_bomb_amount(mut self, damage_from_players_bomb_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_bomb_amount = Some(damage_from_players_bomb_amount);
    self
  }

  pub fn damage_from_players_bomb_amount(&self) -> Option<&i64> {
    self.damage_from_players_bomb_amount.as_ref()
  }

  pub fn reset_damage_from_players_bomb_amount(&mut self) {
    self.damage_from_players_bomb_amount = None;
  }

  pub fn set_damage_from_players_bomb_num_shots(&mut self, damage_from_players_bomb_num_shots: i64) {
    self.damage_from_players_bomb_num_shots = Some(damage_from_players_bomb_num_shots);
  }

  pub fn with_damage_from_players_bomb_num_shots(mut self, damage_from_players_bomb_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_bomb_num_shots = Some(damage_from_players_bomb_num_shots);
    self
  }

  pub fn damage_from_players_bomb_num_shots(&self) -> Option<&i64> {
    self.damage_from_players_bomb_num_shots.as_ref()
  }

  pub fn reset_damage_from_players_bomb_num_shots(&mut self) {
    self.damage_from_players_bomb_num_shots = None;
  }

  pub fn set_damage_from_players_combat_drone_amount(&mut self, damage_from_players_combat_drone_amount: i64) {
    self.damage_from_players_combat_drone_amount = Some(damage_from_players_combat_drone_amount);
  }

  pub fn with_damage_from_players_combat_drone_amount(mut self, damage_from_players_combat_drone_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_combat_drone_amount = Some(damage_from_players_combat_drone_amount);
    self
  }

  pub fn damage_from_players_combat_drone_amount(&self) -> Option<&i64> {
    self.damage_from_players_combat_drone_amount.as_ref()
  }

  pub fn reset_damage_from_players_combat_drone_amount(&mut self) {
    self.damage_from_players_combat_drone_amount = None;
  }

  pub fn set_damage_from_players_combat_drone_num_shots(&mut self, damage_from_players_combat_drone_num_shots: i64) {
    self.damage_from_players_combat_drone_num_shots = Some(damage_from_players_combat_drone_num_shots);
  }

  pub fn with_damage_from_players_combat_drone_num_shots(mut self, damage_from_players_combat_drone_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_combat_drone_num_shots = Some(damage_from_players_combat_drone_num_shots);
    self
  }

  pub fn damage_from_players_combat_drone_num_shots(&self) -> Option<&i64> {
    self.damage_from_players_combat_drone_num_shots.as_ref()
  }

  pub fn reset_damage_from_players_combat_drone_num_shots(&mut self) {
    self.damage_from_players_combat_drone_num_shots = None;
  }

  pub fn set_damage_from_players_energy_amount(&mut self, damage_from_players_energy_amount: i64) {
    self.damage_from_players_energy_amount = Some(damage_from_players_energy_amount);
  }

  pub fn with_damage_from_players_energy_amount(mut self, damage_from_players_energy_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_energy_amount = Some(damage_from_players_energy_amount);
    self
  }

  pub fn damage_from_players_energy_amount(&self) -> Option<&i64> {
    self.damage_from_players_energy_amount.as_ref()
  }

  pub fn reset_damage_from_players_energy_amount(&mut self) {
    self.damage_from_players_energy_amount = None;
  }

  pub fn set_damage_from_players_energy_num_shots(&mut self, damage_from_players_energy_num_shots: i64) {
    self.damage_from_players_energy_num_shots = Some(damage_from_players_energy_num_shots);
  }

  pub fn with_damage_from_players_energy_num_shots(mut self, damage_from_players_energy_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_energy_num_shots = Some(damage_from_players_energy_num_shots);
    self
  }

  pub fn damage_from_players_energy_num_shots(&self) -> Option<&i64> {
    self.damage_from_players_energy_num_shots.as_ref()
  }

  pub fn reset_damage_from_players_energy_num_shots(&mut self) {
    self.damage_from_players_energy_num_shots = None;
  }

  pub fn set_damage_from_players_fighter_bomber_amount(&mut self, damage_from_players_fighter_bomber_amount: i64) {
    self.damage_from_players_fighter_bomber_amount = Some(damage_from_players_fighter_bomber_amount);
  }

  pub fn with_damage_from_players_fighter_bomber_amount(mut self, damage_from_players_fighter_bomber_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_fighter_bomber_amount = Some(damage_from_players_fighter_bomber_amount);
    self
  }

  pub fn damage_from_players_fighter_bomber_amount(&self) -> Option<&i64> {
    self.damage_from_players_fighter_bomber_amount.as_ref()
  }

  pub fn reset_damage_from_players_fighter_bomber_amount(&mut self) {
    self.damage_from_players_fighter_bomber_amount = None;
  }

  pub fn set_damage_from_players_fighter_bomber_num_shots(&mut self, damage_from_players_fighter_bomber_num_shots: i64) {
    self.damage_from_players_fighter_bomber_num_shots = Some(damage_from_players_fighter_bomber_num_shots);
  }

  pub fn with_damage_from_players_fighter_bomber_num_shots(mut self, damage_from_players_fighter_bomber_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_fighter_bomber_num_shots = Some(damage_from_players_fighter_bomber_num_shots);
    self
  }

  pub fn damage_from_players_fighter_bomber_num_shots(&self) -> Option<&i64> {
    self.damage_from_players_fighter_bomber_num_shots.as_ref()
  }

  pub fn reset_damage_from_players_fighter_bomber_num_shots(&mut self) {
    self.damage_from_players_fighter_bomber_num_shots = None;
  }

  pub fn set_damage_from_players_fighter_drone_amount(&mut self, damage_from_players_fighter_drone_amount: i64) {
    self.damage_from_players_fighter_drone_amount = Some(damage_from_players_fighter_drone_amount);
  }

  pub fn with_damage_from_players_fighter_drone_amount(mut self, damage_from_players_fighter_drone_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_fighter_drone_amount = Some(damage_from_players_fighter_drone_amount);
    self
  }

  pub fn damage_from_players_fighter_drone_amount(&self) -> Option<&i64> {
    self.damage_from_players_fighter_drone_amount.as_ref()
  }

  pub fn reset_damage_from_players_fighter_drone_amount(&mut self) {
    self.damage_from_players_fighter_drone_amount = None;
  }

  pub fn set_damage_from_players_fighter_drone_num_shots(&mut self, damage_from_players_fighter_drone_num_shots: i64) {
    self.damage_from_players_fighter_drone_num_shots = Some(damage_from_players_fighter_drone_num_shots);
  }

  pub fn with_damage_from_players_fighter_drone_num_shots(mut self, damage_from_players_fighter_drone_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_fighter_drone_num_shots = Some(damage_from_players_fighter_drone_num_shots);
    self
  }

  pub fn damage_from_players_fighter_drone_num_shots(&self) -> Option<&i64> {
    self.damage_from_players_fighter_drone_num_shots.as_ref()
  }

  pub fn reset_damage_from_players_fighter_drone_num_shots(&mut self) {
    self.damage_from_players_fighter_drone_num_shots = None;
  }

  pub fn set_damage_from_players_hybrid_amount(&mut self, damage_from_players_hybrid_amount: i64) {
    self.damage_from_players_hybrid_amount = Some(damage_from_players_hybrid_amount);
  }

  pub fn with_damage_from_players_hybrid_amount(mut self, damage_from_players_hybrid_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_hybrid_amount = Some(damage_from_players_hybrid_amount);
    self
  }

  pub fn damage_from_players_hybrid_amount(&self) -> Option<&i64> {
    self.damage_from_players_hybrid_amount.as_ref()
  }

  pub fn reset_damage_from_players_hybrid_amount(&mut self) {
    self.damage_from_players_hybrid_amount = None;
  }

  pub fn set_damage_from_players_hybrid_num_shots(&mut self, damage_from_players_hybrid_num_shots: i64) {
    self.damage_from_players_hybrid_num_shots = Some(damage_from_players_hybrid_num_shots);
  }

  pub fn with_damage_from_players_hybrid_num_shots(mut self, damage_from_players_hybrid_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_hybrid_num_shots = Some(damage_from_players_hybrid_num_shots);
    self
  }

  pub fn damage_from_players_hybrid_num_shots(&self) -> Option<&i64> {
    self.damage_from_players_hybrid_num_shots.as_ref()
  }

  pub fn reset_damage_from_players_hybrid_num_shots(&mut self) {
    self.damage_from_players_hybrid_num_shots = None;
  }

  pub fn set_damage_from_players_missile_amount(&mut self, damage_from_players_missile_amount: i64) {
    self.damage_from_players_missile_amount = Some(damage_from_players_missile_amount);
  }

  pub fn with_damage_from_players_missile_amount(mut self, damage_from_players_missile_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_missile_amount = Some(damage_from_players_missile_amount);
    self
  }

  pub fn damage_from_players_missile_amount(&self) -> Option<&i64> {
    self.damage_from_players_missile_amount.as_ref()
  }

  pub fn reset_damage_from_players_missile_amount(&mut self) {
    self.damage_from_players_missile_amount = None;
  }

  pub fn set_damage_from_players_missile_num_shots(&mut self, damage_from_players_missile_num_shots: i64) {
    self.damage_from_players_missile_num_shots = Some(damage_from_players_missile_num_shots);
  }

  pub fn with_damage_from_players_missile_num_shots(mut self, damage_from_players_missile_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_missile_num_shots = Some(damage_from_players_missile_num_shots);
    self
  }

  pub fn damage_from_players_missile_num_shots(&self) -> Option<&i64> {
    self.damage_from_players_missile_num_shots.as_ref()
  }

  pub fn reset_damage_from_players_missile_num_shots(&mut self) {
    self.damage_from_players_missile_num_shots = None;
  }

  pub fn set_damage_from_players_projectile_amount(&mut self, damage_from_players_projectile_amount: i64) {
    self.damage_from_players_projectile_amount = Some(damage_from_players_projectile_amount);
  }

  pub fn with_damage_from_players_projectile_amount(mut self, damage_from_players_projectile_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_projectile_amount = Some(damage_from_players_projectile_amount);
    self
  }

  pub fn damage_from_players_projectile_amount(&self) -> Option<&i64> {
    self.damage_from_players_projectile_amount.as_ref()
  }

  pub fn reset_damage_from_players_projectile_amount(&mut self) {
    self.damage_from_players_projectile_amount = None;
  }

  pub fn set_damage_from_players_projectile_num_shots(&mut self, damage_from_players_projectile_num_shots: i64) {
    self.damage_from_players_projectile_num_shots = Some(damage_from_players_projectile_num_shots);
  }

  pub fn with_damage_from_players_projectile_num_shots(mut self, damage_from_players_projectile_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_projectile_num_shots = Some(damage_from_players_projectile_num_shots);
    self
  }

  pub fn damage_from_players_projectile_num_shots(&self) -> Option<&i64> {
    self.damage_from_players_projectile_num_shots.as_ref()
  }

  pub fn reset_damage_from_players_projectile_num_shots(&mut self) {
    self.damage_from_players_projectile_num_shots = None;
  }

  pub fn set_damage_from_players_smart_bomb_amount(&mut self, damage_from_players_smart_bomb_amount: i64) {
    self.damage_from_players_smart_bomb_amount = Some(damage_from_players_smart_bomb_amount);
  }

  pub fn with_damage_from_players_smart_bomb_amount(mut self, damage_from_players_smart_bomb_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_smart_bomb_amount = Some(damage_from_players_smart_bomb_amount);
    self
  }

  pub fn damage_from_players_smart_bomb_amount(&self) -> Option<&i64> {
    self.damage_from_players_smart_bomb_amount.as_ref()
  }

  pub fn reset_damage_from_players_smart_bomb_amount(&mut self) {
    self.damage_from_players_smart_bomb_amount = None;
  }

  pub fn set_damage_from_players_smart_bomb_num_shots(&mut self, damage_from_players_smart_bomb_num_shots: i64) {
    self.damage_from_players_smart_bomb_num_shots = Some(damage_from_players_smart_bomb_num_shots);
  }

  pub fn with_damage_from_players_smart_bomb_num_shots(mut self, damage_from_players_smart_bomb_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_smart_bomb_num_shots = Some(damage_from_players_smart_bomb_num_shots);
    self
  }

  pub fn damage_from_players_smart_bomb_num_shots(&self) -> Option<&i64> {
    self.damage_from_players_smart_bomb_num_shots.as_ref()
  }

  pub fn reset_damage_from_players_smart_bomb_num_shots(&mut self) {
    self.damage_from_players_smart_bomb_num_shots = None;
  }

  pub fn set_damage_from_players_super_amount(&mut self, damage_from_players_super_amount: i64) {
    self.damage_from_players_super_amount = Some(damage_from_players_super_amount);
  }

  pub fn with_damage_from_players_super_amount(mut self, damage_from_players_super_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_super_amount = Some(damage_from_players_super_amount);
    self
  }

  pub fn damage_from_players_super_amount(&self) -> Option<&i64> {
    self.damage_from_players_super_amount.as_ref()
  }

  pub fn reset_damage_from_players_super_amount(&mut self) {
    self.damage_from_players_super_amount = None;
  }

  pub fn set_damage_from_players_super_num_shots(&mut self, damage_from_players_super_num_shots: i64) {
    self.damage_from_players_super_num_shots = Some(damage_from_players_super_num_shots);
  }

  pub fn with_damage_from_players_super_num_shots(mut self, damage_from_players_super_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_players_super_num_shots = Some(damage_from_players_super_num_shots);
    self
  }

  pub fn damage_from_players_super_num_shots(&self) -> Option<&i64> {
    self.damage_from_players_super_num_shots.as_ref()
  }

  pub fn reset_damage_from_players_super_num_shots(&mut self) {
    self.damage_from_players_super_num_shots = None;
  }

  pub fn set_damage_from_structures_total_amount(&mut self, damage_from_structures_total_amount: i64) {
    self.damage_from_structures_total_amount = Some(damage_from_structures_total_amount);
  }

  pub fn with_damage_from_structures_total_amount(mut self, damage_from_structures_total_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_structures_total_amount = Some(damage_from_structures_total_amount);
    self
  }

  pub fn damage_from_structures_total_amount(&self) -> Option<&i64> {
    self.damage_from_structures_total_amount.as_ref()
  }

  pub fn reset_damage_from_structures_total_amount(&mut self) {
    self.damage_from_structures_total_amount = None;
  }

  pub fn set_damage_from_structures_total_num_shots(&mut self, damage_from_structures_total_num_shots: i64) {
    self.damage_from_structures_total_num_shots = Some(damage_from_structures_total_num_shots);
  }

  pub fn with_damage_from_structures_total_num_shots(mut self, damage_from_structures_total_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_from_structures_total_num_shots = Some(damage_from_structures_total_num_shots);
    self
  }

  pub fn damage_from_structures_total_num_shots(&self) -> Option<&i64> {
    self.damage_from_structures_total_num_shots.as_ref()
  }

  pub fn reset_damage_from_structures_total_num_shots(&mut self) {
    self.damage_from_structures_total_num_shots = None;
  }

  pub fn set_damage_to_players_bomb_amount(&mut self, damage_to_players_bomb_amount: i64) {
    self.damage_to_players_bomb_amount = Some(damage_to_players_bomb_amount);
  }

  pub fn with_damage_to_players_bomb_amount(mut self, damage_to_players_bomb_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_bomb_amount = Some(damage_to_players_bomb_amount);
    self
  }

  pub fn damage_to_players_bomb_amount(&self) -> Option<&i64> {
    self.damage_to_players_bomb_amount.as_ref()
  }

  pub fn reset_damage_to_players_bomb_amount(&mut self) {
    self.damage_to_players_bomb_amount = None;
  }

  pub fn set_damage_to_players_bomb_num_shots(&mut self, damage_to_players_bomb_num_shots: i64) {
    self.damage_to_players_bomb_num_shots = Some(damage_to_players_bomb_num_shots);
  }

  pub fn with_damage_to_players_bomb_num_shots(mut self, damage_to_players_bomb_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_bomb_num_shots = Some(damage_to_players_bomb_num_shots);
    self
  }

  pub fn damage_to_players_bomb_num_shots(&self) -> Option<&i64> {
    self.damage_to_players_bomb_num_shots.as_ref()
  }

  pub fn reset_damage_to_players_bomb_num_shots(&mut self) {
    self.damage_to_players_bomb_num_shots = None;
  }

  pub fn set_damage_to_players_combat_drone_amount(&mut self, damage_to_players_combat_drone_amount: i64) {
    self.damage_to_players_combat_drone_amount = Some(damage_to_players_combat_drone_amount);
  }

  pub fn with_damage_to_players_combat_drone_amount(mut self, damage_to_players_combat_drone_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_combat_drone_amount = Some(damage_to_players_combat_drone_amount);
    self
  }

  pub fn damage_to_players_combat_drone_amount(&self) -> Option<&i64> {
    self.damage_to_players_combat_drone_amount.as_ref()
  }

  pub fn reset_damage_to_players_combat_drone_amount(&mut self) {
    self.damage_to_players_combat_drone_amount = None;
  }

  pub fn set_damage_to_players_combat_drone_num_shots(&mut self, damage_to_players_combat_drone_num_shots: i64) {
    self.damage_to_players_combat_drone_num_shots = Some(damage_to_players_combat_drone_num_shots);
  }

  pub fn with_damage_to_players_combat_drone_num_shots(mut self, damage_to_players_combat_drone_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_combat_drone_num_shots = Some(damage_to_players_combat_drone_num_shots);
    self
  }

  pub fn damage_to_players_combat_drone_num_shots(&self) -> Option<&i64> {
    self.damage_to_players_combat_drone_num_shots.as_ref()
  }

  pub fn reset_damage_to_players_combat_drone_num_shots(&mut self) {
    self.damage_to_players_combat_drone_num_shots = None;
  }

  pub fn set_damage_to_players_energy_amount(&mut self, damage_to_players_energy_amount: i64) {
    self.damage_to_players_energy_amount = Some(damage_to_players_energy_amount);
  }

  pub fn with_damage_to_players_energy_amount(mut self, damage_to_players_energy_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_energy_amount = Some(damage_to_players_energy_amount);
    self
  }

  pub fn damage_to_players_energy_amount(&self) -> Option<&i64> {
    self.damage_to_players_energy_amount.as_ref()
  }

  pub fn reset_damage_to_players_energy_amount(&mut self) {
    self.damage_to_players_energy_amount = None;
  }

  pub fn set_damage_to_players_energy_num_shots(&mut self, damage_to_players_energy_num_shots: i64) {
    self.damage_to_players_energy_num_shots = Some(damage_to_players_energy_num_shots);
  }

  pub fn with_damage_to_players_energy_num_shots(mut self, damage_to_players_energy_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_energy_num_shots = Some(damage_to_players_energy_num_shots);
    self
  }

  pub fn damage_to_players_energy_num_shots(&self) -> Option<&i64> {
    self.damage_to_players_energy_num_shots.as_ref()
  }

  pub fn reset_damage_to_players_energy_num_shots(&mut self) {
    self.damage_to_players_energy_num_shots = None;
  }

  pub fn set_damage_to_players_fighter_bomber_amount(&mut self, damage_to_players_fighter_bomber_amount: i64) {
    self.damage_to_players_fighter_bomber_amount = Some(damage_to_players_fighter_bomber_amount);
  }

  pub fn with_damage_to_players_fighter_bomber_amount(mut self, damage_to_players_fighter_bomber_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_fighter_bomber_amount = Some(damage_to_players_fighter_bomber_amount);
    self
  }

  pub fn damage_to_players_fighter_bomber_amount(&self) -> Option<&i64> {
    self.damage_to_players_fighter_bomber_amount.as_ref()
  }

  pub fn reset_damage_to_players_fighter_bomber_amount(&mut self) {
    self.damage_to_players_fighter_bomber_amount = None;
  }

  pub fn set_damage_to_players_fighter_bomber_num_shots(&mut self, damage_to_players_fighter_bomber_num_shots: i64) {
    self.damage_to_players_fighter_bomber_num_shots = Some(damage_to_players_fighter_bomber_num_shots);
  }

  pub fn with_damage_to_players_fighter_bomber_num_shots(mut self, damage_to_players_fighter_bomber_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_fighter_bomber_num_shots = Some(damage_to_players_fighter_bomber_num_shots);
    self
  }

  pub fn damage_to_players_fighter_bomber_num_shots(&self) -> Option<&i64> {
    self.damage_to_players_fighter_bomber_num_shots.as_ref()
  }

  pub fn reset_damage_to_players_fighter_bomber_num_shots(&mut self) {
    self.damage_to_players_fighter_bomber_num_shots = None;
  }

  pub fn set_damage_to_players_fighter_drone_amount(&mut self, damage_to_players_fighter_drone_amount: i64) {
    self.damage_to_players_fighter_drone_amount = Some(damage_to_players_fighter_drone_amount);
  }

  pub fn with_damage_to_players_fighter_drone_amount(mut self, damage_to_players_fighter_drone_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_fighter_drone_amount = Some(damage_to_players_fighter_drone_amount);
    self
  }

  pub fn damage_to_players_fighter_drone_amount(&self) -> Option<&i64> {
    self.damage_to_players_fighter_drone_amount.as_ref()
  }

  pub fn reset_damage_to_players_fighter_drone_amount(&mut self) {
    self.damage_to_players_fighter_drone_amount = None;
  }

  pub fn set_damage_to_players_fighter_drone_num_shots(&mut self, damage_to_players_fighter_drone_num_shots: i64) {
    self.damage_to_players_fighter_drone_num_shots = Some(damage_to_players_fighter_drone_num_shots);
  }

  pub fn with_damage_to_players_fighter_drone_num_shots(mut self, damage_to_players_fighter_drone_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_fighter_drone_num_shots = Some(damage_to_players_fighter_drone_num_shots);
    self
  }

  pub fn damage_to_players_fighter_drone_num_shots(&self) -> Option<&i64> {
    self.damage_to_players_fighter_drone_num_shots.as_ref()
  }

  pub fn reset_damage_to_players_fighter_drone_num_shots(&mut self) {
    self.damage_to_players_fighter_drone_num_shots = None;
  }

  pub fn set_damage_to_players_hybrid_amount(&mut self, damage_to_players_hybrid_amount: i64) {
    self.damage_to_players_hybrid_amount = Some(damage_to_players_hybrid_amount);
  }

  pub fn with_damage_to_players_hybrid_amount(mut self, damage_to_players_hybrid_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_hybrid_amount = Some(damage_to_players_hybrid_amount);
    self
  }

  pub fn damage_to_players_hybrid_amount(&self) -> Option<&i64> {
    self.damage_to_players_hybrid_amount.as_ref()
  }

  pub fn reset_damage_to_players_hybrid_amount(&mut self) {
    self.damage_to_players_hybrid_amount = None;
  }

  pub fn set_damage_to_players_hybrid_num_shots(&mut self, damage_to_players_hybrid_num_shots: i64) {
    self.damage_to_players_hybrid_num_shots = Some(damage_to_players_hybrid_num_shots);
  }

  pub fn with_damage_to_players_hybrid_num_shots(mut self, damage_to_players_hybrid_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_hybrid_num_shots = Some(damage_to_players_hybrid_num_shots);
    self
  }

  pub fn damage_to_players_hybrid_num_shots(&self) -> Option<&i64> {
    self.damage_to_players_hybrid_num_shots.as_ref()
  }

  pub fn reset_damage_to_players_hybrid_num_shots(&mut self) {
    self.damage_to_players_hybrid_num_shots = None;
  }

  pub fn set_damage_to_players_missile_amount(&mut self, damage_to_players_missile_amount: i64) {
    self.damage_to_players_missile_amount = Some(damage_to_players_missile_amount);
  }

  pub fn with_damage_to_players_missile_amount(mut self, damage_to_players_missile_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_missile_amount = Some(damage_to_players_missile_amount);
    self
  }

  pub fn damage_to_players_missile_amount(&self) -> Option<&i64> {
    self.damage_to_players_missile_amount.as_ref()
  }

  pub fn reset_damage_to_players_missile_amount(&mut self) {
    self.damage_to_players_missile_amount = None;
  }

  pub fn set_damage_to_players_missile_num_shots(&mut self, damage_to_players_missile_num_shots: i64) {
    self.damage_to_players_missile_num_shots = Some(damage_to_players_missile_num_shots);
  }

  pub fn with_damage_to_players_missile_num_shots(mut self, damage_to_players_missile_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_missile_num_shots = Some(damage_to_players_missile_num_shots);
    self
  }

  pub fn damage_to_players_missile_num_shots(&self) -> Option<&i64> {
    self.damage_to_players_missile_num_shots.as_ref()
  }

  pub fn reset_damage_to_players_missile_num_shots(&mut self) {
    self.damage_to_players_missile_num_shots = None;
  }

  pub fn set_damage_to_players_projectile_amount(&mut self, damage_to_players_projectile_amount: i64) {
    self.damage_to_players_projectile_amount = Some(damage_to_players_projectile_amount);
  }

  pub fn with_damage_to_players_projectile_amount(mut self, damage_to_players_projectile_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_projectile_amount = Some(damage_to_players_projectile_amount);
    self
  }

  pub fn damage_to_players_projectile_amount(&self) -> Option<&i64> {
    self.damage_to_players_projectile_amount.as_ref()
  }

  pub fn reset_damage_to_players_projectile_amount(&mut self) {
    self.damage_to_players_projectile_amount = None;
  }

  pub fn set_damage_to_players_projectile_num_shots(&mut self, damage_to_players_projectile_num_shots: i64) {
    self.damage_to_players_projectile_num_shots = Some(damage_to_players_projectile_num_shots);
  }

  pub fn with_damage_to_players_projectile_num_shots(mut self, damage_to_players_projectile_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_projectile_num_shots = Some(damage_to_players_projectile_num_shots);
    self
  }

  pub fn damage_to_players_projectile_num_shots(&self) -> Option<&i64> {
    self.damage_to_players_projectile_num_shots.as_ref()
  }

  pub fn reset_damage_to_players_projectile_num_shots(&mut self) {
    self.damage_to_players_projectile_num_shots = None;
  }

  pub fn set_damage_to_players_smart_bomb_amount(&mut self, damage_to_players_smart_bomb_amount: i64) {
    self.damage_to_players_smart_bomb_amount = Some(damage_to_players_smart_bomb_amount);
  }

  pub fn with_damage_to_players_smart_bomb_amount(mut self, damage_to_players_smart_bomb_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_smart_bomb_amount = Some(damage_to_players_smart_bomb_amount);
    self
  }

  pub fn damage_to_players_smart_bomb_amount(&self) -> Option<&i64> {
    self.damage_to_players_smart_bomb_amount.as_ref()
  }

  pub fn reset_damage_to_players_smart_bomb_amount(&mut self) {
    self.damage_to_players_smart_bomb_amount = None;
  }

  pub fn set_damage_to_players_smart_bomb_num_shots(&mut self, damage_to_players_smart_bomb_num_shots: i64) {
    self.damage_to_players_smart_bomb_num_shots = Some(damage_to_players_smart_bomb_num_shots);
  }

  pub fn with_damage_to_players_smart_bomb_num_shots(mut self, damage_to_players_smart_bomb_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_smart_bomb_num_shots = Some(damage_to_players_smart_bomb_num_shots);
    self
  }

  pub fn damage_to_players_smart_bomb_num_shots(&self) -> Option<&i64> {
    self.damage_to_players_smart_bomb_num_shots.as_ref()
  }

  pub fn reset_damage_to_players_smart_bomb_num_shots(&mut self) {
    self.damage_to_players_smart_bomb_num_shots = None;
  }

  pub fn set_damage_to_players_super_amount(&mut self, damage_to_players_super_amount: i64) {
    self.damage_to_players_super_amount = Some(damage_to_players_super_amount);
  }

  pub fn with_damage_to_players_super_amount(mut self, damage_to_players_super_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_super_amount = Some(damage_to_players_super_amount);
    self
  }

  pub fn damage_to_players_super_amount(&self) -> Option<&i64> {
    self.damage_to_players_super_amount.as_ref()
  }

  pub fn reset_damage_to_players_super_amount(&mut self) {
    self.damage_to_players_super_amount = None;
  }

  pub fn set_damage_to_players_super_num_shots(&mut self, damage_to_players_super_num_shots: i64) {
    self.damage_to_players_super_num_shots = Some(damage_to_players_super_num_shots);
  }

  pub fn with_damage_to_players_super_num_shots(mut self, damage_to_players_super_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_players_super_num_shots = Some(damage_to_players_super_num_shots);
    self
  }

  pub fn damage_to_players_super_num_shots(&self) -> Option<&i64> {
    self.damage_to_players_super_num_shots.as_ref()
  }

  pub fn reset_damage_to_players_super_num_shots(&mut self) {
    self.damage_to_players_super_num_shots = None;
  }

  pub fn set_damage_to_structures_total_amount(&mut self, damage_to_structures_total_amount: i64) {
    self.damage_to_structures_total_amount = Some(damage_to_structures_total_amount);
  }

  pub fn with_damage_to_structures_total_amount(mut self, damage_to_structures_total_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_structures_total_amount = Some(damage_to_structures_total_amount);
    self
  }

  pub fn damage_to_structures_total_amount(&self) -> Option<&i64> {
    self.damage_to_structures_total_amount.as_ref()
  }

  pub fn reset_damage_to_structures_total_amount(&mut self) {
    self.damage_to_structures_total_amount = None;
  }

  pub fn set_damage_to_structures_total_num_shots(&mut self, damage_to_structures_total_num_shots: i64) {
    self.damage_to_structures_total_num_shots = Some(damage_to_structures_total_num_shots);
  }

  pub fn with_damage_to_structures_total_num_shots(mut self, damage_to_structures_total_num_shots: i64) -> GetCharactersCharacterIdStatsCombat {
    self.damage_to_structures_total_num_shots = Some(damage_to_structures_total_num_shots);
    self
  }

  pub fn damage_to_structures_total_num_shots(&self) -> Option<&i64> {
    self.damage_to_structures_total_num_shots.as_ref()
  }

  pub fn reset_damage_to_structures_total_num_shots(&mut self) {
    self.damage_to_structures_total_num_shots = None;
  }

  pub fn set_deaths_high_sec(&mut self, deaths_high_sec: i64) {
    self.deaths_high_sec = Some(deaths_high_sec);
  }

  pub fn with_deaths_high_sec(mut self, deaths_high_sec: i64) -> GetCharactersCharacterIdStatsCombat {
    self.deaths_high_sec = Some(deaths_high_sec);
    self
  }

  pub fn deaths_high_sec(&self) -> Option<&i64> {
    self.deaths_high_sec.as_ref()
  }

  pub fn reset_deaths_high_sec(&mut self) {
    self.deaths_high_sec = None;
  }

  pub fn set_deaths_low_sec(&mut self, deaths_low_sec: i64) {
    self.deaths_low_sec = Some(deaths_low_sec);
  }

  pub fn with_deaths_low_sec(mut self, deaths_low_sec: i64) -> GetCharactersCharacterIdStatsCombat {
    self.deaths_low_sec = Some(deaths_low_sec);
    self
  }

  pub fn deaths_low_sec(&self) -> Option<&i64> {
    self.deaths_low_sec.as_ref()
  }

  pub fn reset_deaths_low_sec(&mut self) {
    self.deaths_low_sec = None;
  }

  pub fn set_deaths_null_sec(&mut self, deaths_null_sec: i64) {
    self.deaths_null_sec = Some(deaths_null_sec);
  }

  pub fn with_deaths_null_sec(mut self, deaths_null_sec: i64) -> GetCharactersCharacterIdStatsCombat {
    self.deaths_null_sec = Some(deaths_null_sec);
    self
  }

  pub fn deaths_null_sec(&self) -> Option<&i64> {
    self.deaths_null_sec.as_ref()
  }

  pub fn reset_deaths_null_sec(&mut self) {
    self.deaths_null_sec = None;
  }

  pub fn set_deaths_pod_high_sec(&mut self, deaths_pod_high_sec: i64) {
    self.deaths_pod_high_sec = Some(deaths_pod_high_sec);
  }

  pub fn with_deaths_pod_high_sec(mut self, deaths_pod_high_sec: i64) -> GetCharactersCharacterIdStatsCombat {
    self.deaths_pod_high_sec = Some(deaths_pod_high_sec);
    self
  }

  pub fn deaths_pod_high_sec(&self) -> Option<&i64> {
    self.deaths_pod_high_sec.as_ref()
  }

  pub fn reset_deaths_pod_high_sec(&mut self) {
    self.deaths_pod_high_sec = None;
  }

  pub fn set_deaths_pod_low_sec(&mut self, deaths_pod_low_sec: i64) {
    self.deaths_pod_low_sec = Some(deaths_pod_low_sec);
  }

  pub fn with_deaths_pod_low_sec(mut self, deaths_pod_low_sec: i64) -> GetCharactersCharacterIdStatsCombat {
    self.deaths_pod_low_sec = Some(deaths_pod_low_sec);
    self
  }

  pub fn deaths_pod_low_sec(&self) -> Option<&i64> {
    self.deaths_pod_low_sec.as_ref()
  }

  pub fn reset_deaths_pod_low_sec(&mut self) {
    self.deaths_pod_low_sec = None;
  }

  pub fn set_deaths_pod_null_sec(&mut self, deaths_pod_null_sec: i64) {
    self.deaths_pod_null_sec = Some(deaths_pod_null_sec);
  }

  pub fn with_deaths_pod_null_sec(mut self, deaths_pod_null_sec: i64) -> GetCharactersCharacterIdStatsCombat {
    self.deaths_pod_null_sec = Some(deaths_pod_null_sec);
    self
  }

  pub fn deaths_pod_null_sec(&self) -> Option<&i64> {
    self.deaths_pod_null_sec.as_ref()
  }

  pub fn reset_deaths_pod_null_sec(&mut self) {
    self.deaths_pod_null_sec = None;
  }

  pub fn set_deaths_pod_wormhole(&mut self, deaths_pod_wormhole: i64) {
    self.deaths_pod_wormhole = Some(deaths_pod_wormhole);
  }

  pub fn with_deaths_pod_wormhole(mut self, deaths_pod_wormhole: i64) -> GetCharactersCharacterIdStatsCombat {
    self.deaths_pod_wormhole = Some(deaths_pod_wormhole);
    self
  }

  pub fn deaths_pod_wormhole(&self) -> Option<&i64> {
    self.deaths_pod_wormhole.as_ref()
  }

  pub fn reset_deaths_pod_wormhole(&mut self) {
    self.deaths_pod_wormhole = None;
  }

  pub fn set_deaths_wormhole(&mut self, deaths_wormhole: i64) {
    self.deaths_wormhole = Some(deaths_wormhole);
  }

  pub fn with_deaths_wormhole(mut self, deaths_wormhole: i64) -> GetCharactersCharacterIdStatsCombat {
    self.deaths_wormhole = Some(deaths_wormhole);
    self
  }

  pub fn deaths_wormhole(&self) -> Option<&i64> {
    self.deaths_wormhole.as_ref()
  }

  pub fn reset_deaths_wormhole(&mut self) {
    self.deaths_wormhole = None;
  }

  pub fn set_drone_engage(&mut self, drone_engage: i64) {
    self.drone_engage = Some(drone_engage);
  }

  pub fn with_drone_engage(mut self, drone_engage: i64) -> GetCharactersCharacterIdStatsCombat {
    self.drone_engage = Some(drone_engage);
    self
  }

  pub fn drone_engage(&self) -> Option<&i64> {
    self.drone_engage.as_ref()
  }

  pub fn reset_drone_engage(&mut self) {
    self.drone_engage = None;
  }

  pub fn set_dscans(&mut self, dscans: i64) {
    self.dscans = Some(dscans);
  }

  pub fn with_dscans(mut self, dscans: i64) -> GetCharactersCharacterIdStatsCombat {
    self.dscans = Some(dscans);
    self
  }

  pub fn dscans(&self) -> Option<&i64> {
    self.dscans.as_ref()
  }

  pub fn reset_dscans(&mut self) {
    self.dscans = None;
  }

  pub fn set_duel_requested(&mut self, duel_requested: i64) {
    self.duel_requested = Some(duel_requested);
  }

  pub fn with_duel_requested(mut self, duel_requested: i64) -> GetCharactersCharacterIdStatsCombat {
    self.duel_requested = Some(duel_requested);
    self
  }

  pub fn duel_requested(&self) -> Option<&i64> {
    self.duel_requested.as_ref()
  }

  pub fn reset_duel_requested(&mut self) {
    self.duel_requested = None;
  }

  pub fn set_engagement_register(&mut self, engagement_register: i64) {
    self.engagement_register = Some(engagement_register);
  }

  pub fn with_engagement_register(mut self, engagement_register: i64) -> GetCharactersCharacterIdStatsCombat {
    self.engagement_register = Some(engagement_register);
    self
  }

  pub fn engagement_register(&self) -> Option<&i64> {
    self.engagement_register.as_ref()
  }

  pub fn reset_engagement_register(&mut self) {
    self.engagement_register = None;
  }

  pub fn set_kills_assists(&mut self, kills_assists: i64) {
    self.kills_assists = Some(kills_assists);
  }

  pub fn with_kills_assists(mut self, kills_assists: i64) -> GetCharactersCharacterIdStatsCombat {
    self.kills_assists = Some(kills_assists);
    self
  }

  pub fn kills_assists(&self) -> Option<&i64> {
    self.kills_assists.as_ref()
  }

  pub fn reset_kills_assists(&mut self) {
    self.kills_assists = None;
  }

  pub fn set_kills_high_sec(&mut self, kills_high_sec: i64) {
    self.kills_high_sec = Some(kills_high_sec);
  }

  pub fn with_kills_high_sec(mut self, kills_high_sec: i64) -> GetCharactersCharacterIdStatsCombat {
    self.kills_high_sec = Some(kills_high_sec);
    self
  }

  pub fn kills_high_sec(&self) -> Option<&i64> {
    self.kills_high_sec.as_ref()
  }

  pub fn reset_kills_high_sec(&mut self) {
    self.kills_high_sec = None;
  }

  pub fn set_kills_low_sec(&mut self, kills_low_sec: i64) {
    self.kills_low_sec = Some(kills_low_sec);
  }

  pub fn with_kills_low_sec(mut self, kills_low_sec: i64) -> GetCharactersCharacterIdStatsCombat {
    self.kills_low_sec = Some(kills_low_sec);
    self
  }

  pub fn kills_low_sec(&self) -> Option<&i64> {
    self.kills_low_sec.as_ref()
  }

  pub fn reset_kills_low_sec(&mut self) {
    self.kills_low_sec = None;
  }

  pub fn set_kills_null_sec(&mut self, kills_null_sec: i64) {
    self.kills_null_sec = Some(kills_null_sec);
  }

  pub fn with_kills_null_sec(mut self, kills_null_sec: i64) -> GetCharactersCharacterIdStatsCombat {
    self.kills_null_sec = Some(kills_null_sec);
    self
  }

  pub fn kills_null_sec(&self) -> Option<&i64> {
    self.kills_null_sec.as_ref()
  }

  pub fn reset_kills_null_sec(&mut self) {
    self.kills_null_sec = None;
  }

  pub fn set_kills_pod_high_sec(&mut self, kills_pod_high_sec: i64) {
    self.kills_pod_high_sec = Some(kills_pod_high_sec);
  }

  pub fn with_kills_pod_high_sec(mut self, kills_pod_high_sec: i64) -> GetCharactersCharacterIdStatsCombat {
    self.kills_pod_high_sec = Some(kills_pod_high_sec);
    self
  }

  pub fn kills_pod_high_sec(&self) -> Option<&i64> {
    self.kills_pod_high_sec.as_ref()
  }

  pub fn reset_kills_pod_high_sec(&mut self) {
    self.kills_pod_high_sec = None;
  }

  pub fn set_kills_pod_low_sec(&mut self, kills_pod_low_sec: i64) {
    self.kills_pod_low_sec = Some(kills_pod_low_sec);
  }

  pub fn with_kills_pod_low_sec(mut self, kills_pod_low_sec: i64) -> GetCharactersCharacterIdStatsCombat {
    self.kills_pod_low_sec = Some(kills_pod_low_sec);
    self
  }

  pub fn kills_pod_low_sec(&self) -> Option<&i64> {
    self.kills_pod_low_sec.as_ref()
  }

  pub fn reset_kills_pod_low_sec(&mut self) {
    self.kills_pod_low_sec = None;
  }

  pub fn set_kills_pod_null_sec(&mut self, kills_pod_null_sec: i64) {
    self.kills_pod_null_sec = Some(kills_pod_null_sec);
  }

  pub fn with_kills_pod_null_sec(mut self, kills_pod_null_sec: i64) -> GetCharactersCharacterIdStatsCombat {
    self.kills_pod_null_sec = Some(kills_pod_null_sec);
    self
  }

  pub fn kills_pod_null_sec(&self) -> Option<&i64> {
    self.kills_pod_null_sec.as_ref()
  }

  pub fn reset_kills_pod_null_sec(&mut self) {
    self.kills_pod_null_sec = None;
  }

  pub fn set_kills_pod_wormhole(&mut self, kills_pod_wormhole: i64) {
    self.kills_pod_wormhole = Some(kills_pod_wormhole);
  }

  pub fn with_kills_pod_wormhole(mut self, kills_pod_wormhole: i64) -> GetCharactersCharacterIdStatsCombat {
    self.kills_pod_wormhole = Some(kills_pod_wormhole);
    self
  }

  pub fn kills_pod_wormhole(&self) -> Option<&i64> {
    self.kills_pod_wormhole.as_ref()
  }

  pub fn reset_kills_pod_wormhole(&mut self) {
    self.kills_pod_wormhole = None;
  }

  pub fn set_kills_wormhole(&mut self, kills_wormhole: i64) {
    self.kills_wormhole = Some(kills_wormhole);
  }

  pub fn with_kills_wormhole(mut self, kills_wormhole: i64) -> GetCharactersCharacterIdStatsCombat {
    self.kills_wormhole = Some(kills_wormhole);
    self
  }

  pub fn kills_wormhole(&self) -> Option<&i64> {
    self.kills_wormhole.as_ref()
  }

  pub fn reset_kills_wormhole(&mut self) {
    self.kills_wormhole = None;
  }

  pub fn set_npc_flag_set(&mut self, npc_flag_set: i64) {
    self.npc_flag_set = Some(npc_flag_set);
  }

  pub fn with_npc_flag_set(mut self, npc_flag_set: i64) -> GetCharactersCharacterIdStatsCombat {
    self.npc_flag_set = Some(npc_flag_set);
    self
  }

  pub fn npc_flag_set(&self) -> Option<&i64> {
    self.npc_flag_set.as_ref()
  }

  pub fn reset_npc_flag_set(&mut self) {
    self.npc_flag_set = None;
  }

  pub fn set_probe_scans(&mut self, probe_scans: i64) {
    self.probe_scans = Some(probe_scans);
  }

  pub fn with_probe_scans(mut self, probe_scans: i64) -> GetCharactersCharacterIdStatsCombat {
    self.probe_scans = Some(probe_scans);
    self
  }

  pub fn probe_scans(&self) -> Option<&i64> {
    self.probe_scans.as_ref()
  }

  pub fn reset_probe_scans(&mut self) {
    self.probe_scans = None;
  }

  pub fn set_pvp_flag_set(&mut self, pvp_flag_set: i64) {
    self.pvp_flag_set = Some(pvp_flag_set);
  }

  pub fn with_pvp_flag_set(mut self, pvp_flag_set: i64) -> GetCharactersCharacterIdStatsCombat {
    self.pvp_flag_set = Some(pvp_flag_set);
    self
  }

  pub fn pvp_flag_set(&self) -> Option<&i64> {
    self.pvp_flag_set.as_ref()
  }

  pub fn reset_pvp_flag_set(&mut self) {
    self.pvp_flag_set = None;
  }

  pub fn set_repair_armor_by_remote_amount(&mut self, repair_armor_by_remote_amount: i64) {
    self.repair_armor_by_remote_amount = Some(repair_armor_by_remote_amount);
  }

  pub fn with_repair_armor_by_remote_amount(mut self, repair_armor_by_remote_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.repair_armor_by_remote_amount = Some(repair_armor_by_remote_amount);
    self
  }

  pub fn repair_armor_by_remote_amount(&self) -> Option<&i64> {
    self.repair_armor_by_remote_amount.as_ref()
  }

  pub fn reset_repair_armor_by_remote_amount(&mut self) {
    self.repair_armor_by_remote_amount = None;
  }

  pub fn set_repair_armor_remote_amount(&mut self, repair_armor_remote_amount: i64) {
    self.repair_armor_remote_amount = Some(repair_armor_remote_amount);
  }

  pub fn with_repair_armor_remote_amount(mut self, repair_armor_remote_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.repair_armor_remote_amount = Some(repair_armor_remote_amount);
    self
  }

  pub fn repair_armor_remote_amount(&self) -> Option<&i64> {
    self.repair_armor_remote_amount.as_ref()
  }

  pub fn reset_repair_armor_remote_amount(&mut self) {
    self.repair_armor_remote_amount = None;
  }

  pub fn set_repair_armor_self_amount(&mut self, repair_armor_self_amount: i64) {
    self.repair_armor_self_amount = Some(repair_armor_self_amount);
  }

  pub fn with_repair_armor_self_amount(mut self, repair_armor_self_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.repair_armor_self_amount = Some(repair_armor_self_amount);
    self
  }

  pub fn repair_armor_self_amount(&self) -> Option<&i64> {
    self.repair_armor_self_amount.as_ref()
  }

  pub fn reset_repair_armor_self_amount(&mut self) {
    self.repair_armor_self_amount = None;
  }

  pub fn set_repair_capacitor_by_remote_amount(&mut self, repair_capacitor_by_remote_amount: i64) {
    self.repair_capacitor_by_remote_amount = Some(repair_capacitor_by_remote_amount);
  }

  pub fn with_repair_capacitor_by_remote_amount(mut self, repair_capacitor_by_remote_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.repair_capacitor_by_remote_amount = Some(repair_capacitor_by_remote_amount);
    self
  }

  pub fn repair_capacitor_by_remote_amount(&self) -> Option<&i64> {
    self.repair_capacitor_by_remote_amount.as_ref()
  }

  pub fn reset_repair_capacitor_by_remote_amount(&mut self) {
    self.repair_capacitor_by_remote_amount = None;
  }

  pub fn set_repair_capacitor_remote_amount(&mut self, repair_capacitor_remote_amount: i64) {
    self.repair_capacitor_remote_amount = Some(repair_capacitor_remote_amount);
  }

  pub fn with_repair_capacitor_remote_amount(mut self, repair_capacitor_remote_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.repair_capacitor_remote_amount = Some(repair_capacitor_remote_amount);
    self
  }

  pub fn repair_capacitor_remote_amount(&self) -> Option<&i64> {
    self.repair_capacitor_remote_amount.as_ref()
  }

  pub fn reset_repair_capacitor_remote_amount(&mut self) {
    self.repair_capacitor_remote_amount = None;
  }

  pub fn set_repair_capacitor_self_amount(&mut self, repair_capacitor_self_amount: i64) {
    self.repair_capacitor_self_amount = Some(repair_capacitor_self_amount);
  }

  pub fn with_repair_capacitor_self_amount(mut self, repair_capacitor_self_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.repair_capacitor_self_amount = Some(repair_capacitor_self_amount);
    self
  }

  pub fn repair_capacitor_self_amount(&self) -> Option<&i64> {
    self.repair_capacitor_self_amount.as_ref()
  }

  pub fn reset_repair_capacitor_self_amount(&mut self) {
    self.repair_capacitor_self_amount = None;
  }

  pub fn set_repair_hull_by_remote_amount(&mut self, repair_hull_by_remote_amount: i64) {
    self.repair_hull_by_remote_amount = Some(repair_hull_by_remote_amount);
  }

  pub fn with_repair_hull_by_remote_amount(mut self, repair_hull_by_remote_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.repair_hull_by_remote_amount = Some(repair_hull_by_remote_amount);
    self
  }

  pub fn repair_hull_by_remote_amount(&self) -> Option<&i64> {
    self.repair_hull_by_remote_amount.as_ref()
  }

  pub fn reset_repair_hull_by_remote_amount(&mut self) {
    self.repair_hull_by_remote_amount = None;
  }

  pub fn set_repair_hull_remote_amount(&mut self, repair_hull_remote_amount: i64) {
    self.repair_hull_remote_amount = Some(repair_hull_remote_amount);
  }

  pub fn with_repair_hull_remote_amount(mut self, repair_hull_remote_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.repair_hull_remote_amount = Some(repair_hull_remote_amount);
    self
  }

  pub fn repair_hull_remote_amount(&self) -> Option<&i64> {
    self.repair_hull_remote_amount.as_ref()
  }

  pub fn reset_repair_hull_remote_amount(&mut self) {
    self.repair_hull_remote_amount = None;
  }

  pub fn set_repair_hull_self_amount(&mut self, repair_hull_self_amount: i64) {
    self.repair_hull_self_amount = Some(repair_hull_self_amount);
  }

  pub fn with_repair_hull_self_amount(mut self, repair_hull_self_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.repair_hull_self_amount = Some(repair_hull_self_amount);
    self
  }

  pub fn repair_hull_self_amount(&self) -> Option<&i64> {
    self.repair_hull_self_amount.as_ref()
  }

  pub fn reset_repair_hull_self_amount(&mut self) {
    self.repair_hull_self_amount = None;
  }

  pub fn set_repair_shield_by_remote_amount(&mut self, repair_shield_by_remote_amount: i64) {
    self.repair_shield_by_remote_amount = Some(repair_shield_by_remote_amount);
  }

  pub fn with_repair_shield_by_remote_amount(mut self, repair_shield_by_remote_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.repair_shield_by_remote_amount = Some(repair_shield_by_remote_amount);
    self
  }

  pub fn repair_shield_by_remote_amount(&self) -> Option<&i64> {
    self.repair_shield_by_remote_amount.as_ref()
  }

  pub fn reset_repair_shield_by_remote_amount(&mut self) {
    self.repair_shield_by_remote_amount = None;
  }

  pub fn set_repair_shield_remote_amount(&mut self, repair_shield_remote_amount: i64) {
    self.repair_shield_remote_amount = Some(repair_shield_remote_amount);
  }

  pub fn with_repair_shield_remote_amount(mut self, repair_shield_remote_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.repair_shield_remote_amount = Some(repair_shield_remote_amount);
    self
  }

  pub fn repair_shield_remote_amount(&self) -> Option<&i64> {
    self.repair_shield_remote_amount.as_ref()
  }

  pub fn reset_repair_shield_remote_amount(&mut self) {
    self.repair_shield_remote_amount = None;
  }

  pub fn set_repair_shield_self_amount(&mut self, repair_shield_self_amount: i64) {
    self.repair_shield_self_amount = Some(repair_shield_self_amount);
  }

  pub fn with_repair_shield_self_amount(mut self, repair_shield_self_amount: i64) -> GetCharactersCharacterIdStatsCombat {
    self.repair_shield_self_amount = Some(repair_shield_self_amount);
    self
  }

  pub fn repair_shield_self_amount(&self) -> Option<&i64> {
    self.repair_shield_self_amount.as_ref()
  }

  pub fn reset_repair_shield_self_amount(&mut self) {
    self.repair_shield_self_amount = None;
  }

  pub fn set_self_destructs(&mut self, self_destructs: i64) {
    self.self_destructs = Some(self_destructs);
  }

  pub fn with_self_destructs(mut self, self_destructs: i64) -> GetCharactersCharacterIdStatsCombat {
    self.self_destructs = Some(self_destructs);
    self
  }

  pub fn self_destructs(&self) -> Option<&i64> {
    self.self_destructs.as_ref()
  }

  pub fn reset_self_destructs(&mut self) {
    self.self_destructs = None;
  }

  pub fn set_warp_scramble_pc(&mut self, warp_scramble_pc: i64) {
    self.warp_scramble_pc = Some(warp_scramble_pc);
  }

  pub fn with_warp_scramble_pc(mut self, warp_scramble_pc: i64) -> GetCharactersCharacterIdStatsCombat {
    self.warp_scramble_pc = Some(warp_scramble_pc);
    self
  }

  pub fn warp_scramble_pc(&self) -> Option<&i64> {
    self.warp_scramble_pc.as_ref()
  }

  pub fn reset_warp_scramble_pc(&mut self) {
    self.warp_scramble_pc = None;
  }

  pub fn set_warp_scrambledby_npc(&mut self, warp_scrambledby_npc: i64) {
    self.warp_scrambledby_npc = Some(warp_scrambledby_npc);
  }

  pub fn with_warp_scrambledby_npc(mut self, warp_scrambledby_npc: i64) -> GetCharactersCharacterIdStatsCombat {
    self.warp_scrambledby_npc = Some(warp_scrambledby_npc);
    self
  }

  pub fn warp_scrambledby_npc(&self) -> Option<&i64> {
    self.warp_scrambledby_npc.as_ref()
  }

  pub fn reset_warp_scrambledby_npc(&mut self) {
    self.warp_scrambledby_npc = None;
  }

  pub fn set_warp_scrambledby_pc(&mut self, warp_scrambledby_pc: i64) {
    self.warp_scrambledby_pc = Some(warp_scrambledby_pc);
  }

  pub fn with_warp_scrambledby_pc(mut self, warp_scrambledby_pc: i64) -> GetCharactersCharacterIdStatsCombat {
    self.warp_scrambledby_pc = Some(warp_scrambledby_pc);
    self
  }

  pub fn warp_scrambledby_pc(&self) -> Option<&i64> {
    self.warp_scrambledby_pc.as_ref()
  }

  pub fn reset_warp_scrambledby_pc(&mut self) {
    self.warp_scrambledby_pc = None;
  }

  pub fn set_weapon_flag_set(&mut self, weapon_flag_set: i64) {
    self.weapon_flag_set = Some(weapon_flag_set);
  }

  pub fn with_weapon_flag_set(mut self, weapon_flag_set: i64) -> GetCharactersCharacterIdStatsCombat {
    self.weapon_flag_set = Some(weapon_flag_set);
    self
  }

  pub fn weapon_flag_set(&self) -> Option<&i64> {
    self.weapon_flag_set.as_ref()
  }

  pub fn reset_weapon_flag_set(&mut self) {
    self.weapon_flag_set = None;
  }

  pub fn set_webifiedby_npc(&mut self, webifiedby_npc: i64) {
    self.webifiedby_npc = Some(webifiedby_npc);
  }

  pub fn with_webifiedby_npc(mut self, webifiedby_npc: i64) -> GetCharactersCharacterIdStatsCombat {
    self.webifiedby_npc = Some(webifiedby_npc);
    self
  }

  pub fn webifiedby_npc(&self) -> Option<&i64> {
    self.webifiedby_npc.as_ref()
  }

  pub fn reset_webifiedby_npc(&mut self) {
    self.webifiedby_npc = None;
  }

  pub fn set_webifiedby_pc(&mut self, webifiedby_pc: i64) {
    self.webifiedby_pc = Some(webifiedby_pc);
  }

  pub fn with_webifiedby_pc(mut self, webifiedby_pc: i64) -> GetCharactersCharacterIdStatsCombat {
    self.webifiedby_pc = Some(webifiedby_pc);
    self
  }

  pub fn webifiedby_pc(&self) -> Option<&i64> {
    self.webifiedby_pc.as_ref()
  }

  pub fn reset_webifiedby_pc(&mut self) {
    self.webifiedby_pc = None;
  }

  pub fn set_webifying_pc(&mut self, webifying_pc: i64) {
    self.webifying_pc = Some(webifying_pc);
  }

  pub fn with_webifying_pc(mut self, webifying_pc: i64) -> GetCharactersCharacterIdStatsCombat {
    self.webifying_pc = Some(webifying_pc);
    self
  }

  pub fn webifying_pc(&self) -> Option<&i64> {
    self.webifying_pc.as_ref()
  }

  pub fn reset_webifying_pc(&mut self) {
    self.webifying_pc = None;
  }

}



