/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdStatsTravel : travel object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdStatsTravel {
  /// acceleration_gate_activations integer
  #[serde(rename = "acceleration_gate_activations")]
  acceleration_gate_activations: Option<i64>,
  /// align_to integer
  #[serde(rename = "align_to")]
  align_to: Option<i64>,
  /// distance_warped_high_sec integer
  #[serde(rename = "distance_warped_high_sec")]
  distance_warped_high_sec: Option<i64>,
  /// distance_warped_low_sec integer
  #[serde(rename = "distance_warped_low_sec")]
  distance_warped_low_sec: Option<i64>,
  /// distance_warped_null_sec integer
  #[serde(rename = "distance_warped_null_sec")]
  distance_warped_null_sec: Option<i64>,
  /// distance_warped_wormhole integer
  #[serde(rename = "distance_warped_wormhole")]
  distance_warped_wormhole: Option<i64>,
  /// docks_high_sec integer
  #[serde(rename = "docks_high_sec")]
  docks_high_sec: Option<i64>,
  /// docks_low_sec integer
  #[serde(rename = "docks_low_sec")]
  docks_low_sec: Option<i64>,
  /// docks_null_sec integer
  #[serde(rename = "docks_null_sec")]
  docks_null_sec: Option<i64>,
  /// jumps_stargate_high_sec integer
  #[serde(rename = "jumps_stargate_high_sec")]
  jumps_stargate_high_sec: Option<i64>,
  /// jumps_stargate_low_sec integer
  #[serde(rename = "jumps_stargate_low_sec")]
  jumps_stargate_low_sec: Option<i64>,
  /// jumps_stargate_null_sec integer
  #[serde(rename = "jumps_stargate_null_sec")]
  jumps_stargate_null_sec: Option<i64>,
  /// jumps_wormhole integer
  #[serde(rename = "jumps_wormhole")]
  jumps_wormhole: Option<i64>,
  /// warps_high_sec integer
  #[serde(rename = "warps_high_sec")]
  warps_high_sec: Option<i64>,
  /// warps_low_sec integer
  #[serde(rename = "warps_low_sec")]
  warps_low_sec: Option<i64>,
  /// warps_null_sec integer
  #[serde(rename = "warps_null_sec")]
  warps_null_sec: Option<i64>,
  /// warps_to_bookmark integer
  #[serde(rename = "warps_to_bookmark")]
  warps_to_bookmark: Option<i64>,
  /// warps_to_celestial integer
  #[serde(rename = "warps_to_celestial")]
  warps_to_celestial: Option<i64>,
  /// warps_to_fleet_member integer
  #[serde(rename = "warps_to_fleet_member")]
  warps_to_fleet_member: Option<i64>,
  /// warps_to_scan_result integer
  #[serde(rename = "warps_to_scan_result")]
  warps_to_scan_result: Option<i64>,
  /// warps_wormhole integer
  #[serde(rename = "warps_wormhole")]
  warps_wormhole: Option<i64>
}

impl GetCharactersCharacterIdStatsTravel {
  /// travel object
  pub fn new() -> GetCharactersCharacterIdStatsTravel {
    GetCharactersCharacterIdStatsTravel {
      acceleration_gate_activations: None,
      align_to: None,
      distance_warped_high_sec: None,
      distance_warped_low_sec: None,
      distance_warped_null_sec: None,
      distance_warped_wormhole: None,
      docks_high_sec: None,
      docks_low_sec: None,
      docks_null_sec: None,
      jumps_stargate_high_sec: None,
      jumps_stargate_low_sec: None,
      jumps_stargate_null_sec: None,
      jumps_wormhole: None,
      warps_high_sec: None,
      warps_low_sec: None,
      warps_null_sec: None,
      warps_to_bookmark: None,
      warps_to_celestial: None,
      warps_to_fleet_member: None,
      warps_to_scan_result: None,
      warps_wormhole: None
    }
  }

  pub fn set_acceleration_gate_activations(&mut self, acceleration_gate_activations: i64) {
    self.acceleration_gate_activations = Some(acceleration_gate_activations);
  }

  pub fn with_acceleration_gate_activations(mut self, acceleration_gate_activations: i64) -> GetCharactersCharacterIdStatsTravel {
    self.acceleration_gate_activations = Some(acceleration_gate_activations);
    self
  }

  pub fn acceleration_gate_activations(&self) -> Option<&i64> {
    self.acceleration_gate_activations.as_ref()
  }

  pub fn reset_acceleration_gate_activations(&mut self) {
    self.acceleration_gate_activations = None;
  }

  pub fn set_align_to(&mut self, align_to: i64) {
    self.align_to = Some(align_to);
  }

  pub fn with_align_to(mut self, align_to: i64) -> GetCharactersCharacterIdStatsTravel {
    self.align_to = Some(align_to);
    self
  }

  pub fn align_to(&self) -> Option<&i64> {
    self.align_to.as_ref()
  }

  pub fn reset_align_to(&mut self) {
    self.align_to = None;
  }

  pub fn set_distance_warped_high_sec(&mut self, distance_warped_high_sec: i64) {
    self.distance_warped_high_sec = Some(distance_warped_high_sec);
  }

  pub fn with_distance_warped_high_sec(mut self, distance_warped_high_sec: i64) -> GetCharactersCharacterIdStatsTravel {
    self.distance_warped_high_sec = Some(distance_warped_high_sec);
    self
  }

  pub fn distance_warped_high_sec(&self) -> Option<&i64> {
    self.distance_warped_high_sec.as_ref()
  }

  pub fn reset_distance_warped_high_sec(&mut self) {
    self.distance_warped_high_sec = None;
  }

  pub fn set_distance_warped_low_sec(&mut self, distance_warped_low_sec: i64) {
    self.distance_warped_low_sec = Some(distance_warped_low_sec);
  }

  pub fn with_distance_warped_low_sec(mut self, distance_warped_low_sec: i64) -> GetCharactersCharacterIdStatsTravel {
    self.distance_warped_low_sec = Some(distance_warped_low_sec);
    self
  }

  pub fn distance_warped_low_sec(&self) -> Option<&i64> {
    self.distance_warped_low_sec.as_ref()
  }

  pub fn reset_distance_warped_low_sec(&mut self) {
    self.distance_warped_low_sec = None;
  }

  pub fn set_distance_warped_null_sec(&mut self, distance_warped_null_sec: i64) {
    self.distance_warped_null_sec = Some(distance_warped_null_sec);
  }

  pub fn with_distance_warped_null_sec(mut self, distance_warped_null_sec: i64) -> GetCharactersCharacterIdStatsTravel {
    self.distance_warped_null_sec = Some(distance_warped_null_sec);
    self
  }

  pub fn distance_warped_null_sec(&self) -> Option<&i64> {
    self.distance_warped_null_sec.as_ref()
  }

  pub fn reset_distance_warped_null_sec(&mut self) {
    self.distance_warped_null_sec = None;
  }

  pub fn set_distance_warped_wormhole(&mut self, distance_warped_wormhole: i64) {
    self.distance_warped_wormhole = Some(distance_warped_wormhole);
  }

  pub fn with_distance_warped_wormhole(mut self, distance_warped_wormhole: i64) -> GetCharactersCharacterIdStatsTravel {
    self.distance_warped_wormhole = Some(distance_warped_wormhole);
    self
  }

  pub fn distance_warped_wormhole(&self) -> Option<&i64> {
    self.distance_warped_wormhole.as_ref()
  }

  pub fn reset_distance_warped_wormhole(&mut self) {
    self.distance_warped_wormhole = None;
  }

  pub fn set_docks_high_sec(&mut self, docks_high_sec: i64) {
    self.docks_high_sec = Some(docks_high_sec);
  }

  pub fn with_docks_high_sec(mut self, docks_high_sec: i64) -> GetCharactersCharacterIdStatsTravel {
    self.docks_high_sec = Some(docks_high_sec);
    self
  }

  pub fn docks_high_sec(&self) -> Option<&i64> {
    self.docks_high_sec.as_ref()
  }

  pub fn reset_docks_high_sec(&mut self) {
    self.docks_high_sec = None;
  }

  pub fn set_docks_low_sec(&mut self, docks_low_sec: i64) {
    self.docks_low_sec = Some(docks_low_sec);
  }

  pub fn with_docks_low_sec(mut self, docks_low_sec: i64) -> GetCharactersCharacterIdStatsTravel {
    self.docks_low_sec = Some(docks_low_sec);
    self
  }

  pub fn docks_low_sec(&self) -> Option<&i64> {
    self.docks_low_sec.as_ref()
  }

  pub fn reset_docks_low_sec(&mut self) {
    self.docks_low_sec = None;
  }

  pub fn set_docks_null_sec(&mut self, docks_null_sec: i64) {
    self.docks_null_sec = Some(docks_null_sec);
  }

  pub fn with_docks_null_sec(mut self, docks_null_sec: i64) -> GetCharactersCharacterIdStatsTravel {
    self.docks_null_sec = Some(docks_null_sec);
    self
  }

  pub fn docks_null_sec(&self) -> Option<&i64> {
    self.docks_null_sec.as_ref()
  }

  pub fn reset_docks_null_sec(&mut self) {
    self.docks_null_sec = None;
  }

  pub fn set_jumps_stargate_high_sec(&mut self, jumps_stargate_high_sec: i64) {
    self.jumps_stargate_high_sec = Some(jumps_stargate_high_sec);
  }

  pub fn with_jumps_stargate_high_sec(mut self, jumps_stargate_high_sec: i64) -> GetCharactersCharacterIdStatsTravel {
    self.jumps_stargate_high_sec = Some(jumps_stargate_high_sec);
    self
  }

  pub fn jumps_stargate_high_sec(&self) -> Option<&i64> {
    self.jumps_stargate_high_sec.as_ref()
  }

  pub fn reset_jumps_stargate_high_sec(&mut self) {
    self.jumps_stargate_high_sec = None;
  }

  pub fn set_jumps_stargate_low_sec(&mut self, jumps_stargate_low_sec: i64) {
    self.jumps_stargate_low_sec = Some(jumps_stargate_low_sec);
  }

  pub fn with_jumps_stargate_low_sec(mut self, jumps_stargate_low_sec: i64) -> GetCharactersCharacterIdStatsTravel {
    self.jumps_stargate_low_sec = Some(jumps_stargate_low_sec);
    self
  }

  pub fn jumps_stargate_low_sec(&self) -> Option<&i64> {
    self.jumps_stargate_low_sec.as_ref()
  }

  pub fn reset_jumps_stargate_low_sec(&mut self) {
    self.jumps_stargate_low_sec = None;
  }

  pub fn set_jumps_stargate_null_sec(&mut self, jumps_stargate_null_sec: i64) {
    self.jumps_stargate_null_sec = Some(jumps_stargate_null_sec);
  }

  pub fn with_jumps_stargate_null_sec(mut self, jumps_stargate_null_sec: i64) -> GetCharactersCharacterIdStatsTravel {
    self.jumps_stargate_null_sec = Some(jumps_stargate_null_sec);
    self
  }

  pub fn jumps_stargate_null_sec(&self) -> Option<&i64> {
    self.jumps_stargate_null_sec.as_ref()
  }

  pub fn reset_jumps_stargate_null_sec(&mut self) {
    self.jumps_stargate_null_sec = None;
  }

  pub fn set_jumps_wormhole(&mut self, jumps_wormhole: i64) {
    self.jumps_wormhole = Some(jumps_wormhole);
  }

  pub fn with_jumps_wormhole(mut self, jumps_wormhole: i64) -> GetCharactersCharacterIdStatsTravel {
    self.jumps_wormhole = Some(jumps_wormhole);
    self
  }

  pub fn jumps_wormhole(&self) -> Option<&i64> {
    self.jumps_wormhole.as_ref()
  }

  pub fn reset_jumps_wormhole(&mut self) {
    self.jumps_wormhole = None;
  }

  pub fn set_warps_high_sec(&mut self, warps_high_sec: i64) {
    self.warps_high_sec = Some(warps_high_sec);
  }

  pub fn with_warps_high_sec(mut self, warps_high_sec: i64) -> GetCharactersCharacterIdStatsTravel {
    self.warps_high_sec = Some(warps_high_sec);
    self
  }

  pub fn warps_high_sec(&self) -> Option<&i64> {
    self.warps_high_sec.as_ref()
  }

  pub fn reset_warps_high_sec(&mut self) {
    self.warps_high_sec = None;
  }

  pub fn set_warps_low_sec(&mut self, warps_low_sec: i64) {
    self.warps_low_sec = Some(warps_low_sec);
  }

  pub fn with_warps_low_sec(mut self, warps_low_sec: i64) -> GetCharactersCharacterIdStatsTravel {
    self.warps_low_sec = Some(warps_low_sec);
    self
  }

  pub fn warps_low_sec(&self) -> Option<&i64> {
    self.warps_low_sec.as_ref()
  }

  pub fn reset_warps_low_sec(&mut self) {
    self.warps_low_sec = None;
  }

  pub fn set_warps_null_sec(&mut self, warps_null_sec: i64) {
    self.warps_null_sec = Some(warps_null_sec);
  }

  pub fn with_warps_null_sec(mut self, warps_null_sec: i64) -> GetCharactersCharacterIdStatsTravel {
    self.warps_null_sec = Some(warps_null_sec);
    self
  }

  pub fn warps_null_sec(&self) -> Option<&i64> {
    self.warps_null_sec.as_ref()
  }

  pub fn reset_warps_null_sec(&mut self) {
    self.warps_null_sec = None;
  }

  pub fn set_warps_to_bookmark(&mut self, warps_to_bookmark: i64) {
    self.warps_to_bookmark = Some(warps_to_bookmark);
  }

  pub fn with_warps_to_bookmark(mut self, warps_to_bookmark: i64) -> GetCharactersCharacterIdStatsTravel {
    self.warps_to_bookmark = Some(warps_to_bookmark);
    self
  }

  pub fn warps_to_bookmark(&self) -> Option<&i64> {
    self.warps_to_bookmark.as_ref()
  }

  pub fn reset_warps_to_bookmark(&mut self) {
    self.warps_to_bookmark = None;
  }

  pub fn set_warps_to_celestial(&mut self, warps_to_celestial: i64) {
    self.warps_to_celestial = Some(warps_to_celestial);
  }

  pub fn with_warps_to_celestial(mut self, warps_to_celestial: i64) -> GetCharactersCharacterIdStatsTravel {
    self.warps_to_celestial = Some(warps_to_celestial);
    self
  }

  pub fn warps_to_celestial(&self) -> Option<&i64> {
    self.warps_to_celestial.as_ref()
  }

  pub fn reset_warps_to_celestial(&mut self) {
    self.warps_to_celestial = None;
  }

  pub fn set_warps_to_fleet_member(&mut self, warps_to_fleet_member: i64) {
    self.warps_to_fleet_member = Some(warps_to_fleet_member);
  }

  pub fn with_warps_to_fleet_member(mut self, warps_to_fleet_member: i64) -> GetCharactersCharacterIdStatsTravel {
    self.warps_to_fleet_member = Some(warps_to_fleet_member);
    self
  }

  pub fn warps_to_fleet_member(&self) -> Option<&i64> {
    self.warps_to_fleet_member.as_ref()
  }

  pub fn reset_warps_to_fleet_member(&mut self) {
    self.warps_to_fleet_member = None;
  }

  pub fn set_warps_to_scan_result(&mut self, warps_to_scan_result: i64) {
    self.warps_to_scan_result = Some(warps_to_scan_result);
  }

  pub fn with_warps_to_scan_result(mut self, warps_to_scan_result: i64) -> GetCharactersCharacterIdStatsTravel {
    self.warps_to_scan_result = Some(warps_to_scan_result);
    self
  }

  pub fn warps_to_scan_result(&self) -> Option<&i64> {
    self.warps_to_scan_result.as_ref()
  }

  pub fn reset_warps_to_scan_result(&mut self) {
    self.warps_to_scan_result = None;
  }

  pub fn set_warps_wormhole(&mut self, warps_wormhole: i64) {
    self.warps_wormhole = Some(warps_wormhole);
  }

  pub fn with_warps_wormhole(mut self, warps_wormhole: i64) -> GetCharactersCharacterIdStatsTravel {
    self.warps_wormhole = Some(warps_wormhole);
    self
  }

  pub fn warps_wormhole(&self) -> Option<&i64> {
    self.warps_wormhole.as_ref()
  }

  pub fn reset_warps_wormhole(&mut self) {
    self.warps_wormhole = None;
  }

}



