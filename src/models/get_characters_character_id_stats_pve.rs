/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetCharactersCharacterIdStatsPve : pve object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetCharactersCharacterIdStatsPve {
  /// dungeons_completed_agent integer
  #[serde(rename = "dungeons_completed_agent")]
  dungeons_completed_agent: Option<i64>,
  /// dungeons_completed_distribution integer
  #[serde(rename = "dungeons_completed_distribution")]
  dungeons_completed_distribution: Option<i64>,
  /// missions_succeeded integer
  #[serde(rename = "missions_succeeded")]
  missions_succeeded: Option<i64>,
  /// missions_succeeded_epic_arc integer
  #[serde(rename = "missions_succeeded_epic_arc")]
  missions_succeeded_epic_arc: Option<i64>
}

impl GetCharactersCharacterIdStatsPve {
  /// pve object
  pub fn new() -> GetCharactersCharacterIdStatsPve {
    GetCharactersCharacterIdStatsPve {
      dungeons_completed_agent: None,
      dungeons_completed_distribution: None,
      missions_succeeded: None,
      missions_succeeded_epic_arc: None
    }
  }

  pub fn set_dungeons_completed_agent(&mut self, dungeons_completed_agent: i64) {
    self.dungeons_completed_agent = Some(dungeons_completed_agent);
  }

  pub fn with_dungeons_completed_agent(mut self, dungeons_completed_agent: i64) -> GetCharactersCharacterIdStatsPve {
    self.dungeons_completed_agent = Some(dungeons_completed_agent);
    self
  }

  pub fn dungeons_completed_agent(&self) -> Option<&i64> {
    self.dungeons_completed_agent.as_ref()
  }

  pub fn reset_dungeons_completed_agent(&mut self) {
    self.dungeons_completed_agent = None;
  }

  pub fn set_dungeons_completed_distribution(&mut self, dungeons_completed_distribution: i64) {
    self.dungeons_completed_distribution = Some(dungeons_completed_distribution);
  }

  pub fn with_dungeons_completed_distribution(mut self, dungeons_completed_distribution: i64) -> GetCharactersCharacterIdStatsPve {
    self.dungeons_completed_distribution = Some(dungeons_completed_distribution);
    self
  }

  pub fn dungeons_completed_distribution(&self) -> Option<&i64> {
    self.dungeons_completed_distribution.as_ref()
  }

  pub fn reset_dungeons_completed_distribution(&mut self) {
    self.dungeons_completed_distribution = None;
  }

  pub fn set_missions_succeeded(&mut self, missions_succeeded: i64) {
    self.missions_succeeded = Some(missions_succeeded);
  }

  pub fn with_missions_succeeded(mut self, missions_succeeded: i64) -> GetCharactersCharacterIdStatsPve {
    self.missions_succeeded = Some(missions_succeeded);
    self
  }

  pub fn missions_succeeded(&self) -> Option<&i64> {
    self.missions_succeeded.as_ref()
  }

  pub fn reset_missions_succeeded(&mut self) {
    self.missions_succeeded = None;
  }

  pub fn set_missions_succeeded_epic_arc(&mut self, missions_succeeded_epic_arc: i64) {
    self.missions_succeeded_epic_arc = Some(missions_succeeded_epic_arc);
  }

  pub fn with_missions_succeeded_epic_arc(mut self, missions_succeeded_epic_arc: i64) -> GetCharactersCharacterIdStatsPve {
    self.missions_succeeded_epic_arc = Some(missions_succeeded_epic_arc);
    self
  }

  pub fn missions_succeeded_epic_arc(&self) -> Option<&i64> {
    self.missions_succeeded_epic_arc.as_ref()
  }

  pub fn reset_missions_succeeded_epic_arc(&mut self) {
    self.missions_succeeded_epic_arc = None;
  }

}



