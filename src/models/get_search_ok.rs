/* 
 * EVE Swagger Interface
 *
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 1.3.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetSearchOk : 200 ok object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetSearchOk {
  /// agent array
  #[serde(rename = "agent")]
  agent: Option<Vec<i32>>,
  /// alliance array
  #[serde(rename = "alliance")]
  alliance: Option<Vec<i32>>,
  /// character array
  #[serde(rename = "character")]
  character: Option<Vec<i32>>,
  /// constellation array
  #[serde(rename = "constellation")]
  constellation: Option<Vec<i32>>,
  /// corporation array
  #[serde(rename = "corporation")]
  corporation: Option<Vec<i32>>,
  /// faction array
  #[serde(rename = "faction")]
  faction: Option<Vec<i32>>,
  /// inventory_type array
  #[serde(rename = "inventory_type")]
  inventory_type: Option<Vec<i32>>,
  /// region array
  #[serde(rename = "region")]
  region: Option<Vec<i32>>,
  /// solar_system array
  #[serde(rename = "solar_system")]
  solar_system: Option<Vec<i32>>,
  /// station array
  #[serde(rename = "station")]
  station: Option<Vec<i32>>
}

impl GetSearchOk {
  /// 200 ok object
  pub fn new() -> GetSearchOk {
    GetSearchOk {
      agent: None,
      alliance: None,
      character: None,
      constellation: None,
      corporation: None,
      faction: None,
      inventory_type: None,
      region: None,
      solar_system: None,
      station: None
    }
  }

  pub fn set_agent(&mut self, agent: Vec<i32>) {
    self.agent = Some(agent);
  }

  pub fn with_agent(mut self, agent: Vec<i32>) -> GetSearchOk {
    self.agent = Some(agent);
    self
  }

  pub fn agent(&self) -> Option<&Vec<i32>> {
    self.agent.as_ref()
  }

  pub fn reset_agent(&mut self) {
    self.agent = None;
  }

  pub fn set_alliance(&mut self, alliance: Vec<i32>) {
    self.alliance = Some(alliance);
  }

  pub fn with_alliance(mut self, alliance: Vec<i32>) -> GetSearchOk {
    self.alliance = Some(alliance);
    self
  }

  pub fn alliance(&self) -> Option<&Vec<i32>> {
    self.alliance.as_ref()
  }

  pub fn reset_alliance(&mut self) {
    self.alliance = None;
  }

  pub fn set_character(&mut self, character: Vec<i32>) {
    self.character = Some(character);
  }

  pub fn with_character(mut self, character: Vec<i32>) -> GetSearchOk {
    self.character = Some(character);
    self
  }

  pub fn character(&self) -> Option<&Vec<i32>> {
    self.character.as_ref()
  }

  pub fn reset_character(&mut self) {
    self.character = None;
  }

  pub fn set_constellation(&mut self, constellation: Vec<i32>) {
    self.constellation = Some(constellation);
  }

  pub fn with_constellation(mut self, constellation: Vec<i32>) -> GetSearchOk {
    self.constellation = Some(constellation);
    self
  }

  pub fn constellation(&self) -> Option<&Vec<i32>> {
    self.constellation.as_ref()
  }

  pub fn reset_constellation(&mut self) {
    self.constellation = None;
  }

  pub fn set_corporation(&mut self, corporation: Vec<i32>) {
    self.corporation = Some(corporation);
  }

  pub fn with_corporation(mut self, corporation: Vec<i32>) -> GetSearchOk {
    self.corporation = Some(corporation);
    self
  }

  pub fn corporation(&self) -> Option<&Vec<i32>> {
    self.corporation.as_ref()
  }

  pub fn reset_corporation(&mut self) {
    self.corporation = None;
  }

  pub fn set_faction(&mut self, faction: Vec<i32>) {
    self.faction = Some(faction);
  }

  pub fn with_faction(mut self, faction: Vec<i32>) -> GetSearchOk {
    self.faction = Some(faction);
    self
  }

  pub fn faction(&self) -> Option<&Vec<i32>> {
    self.faction.as_ref()
  }

  pub fn reset_faction(&mut self) {
    self.faction = None;
  }

  pub fn set_inventory_type(&mut self, inventory_type: Vec<i32>) {
    self.inventory_type = Some(inventory_type);
  }

  pub fn with_inventory_type(mut self, inventory_type: Vec<i32>) -> GetSearchOk {
    self.inventory_type = Some(inventory_type);
    self
  }

  pub fn inventory_type(&self) -> Option<&Vec<i32>> {
    self.inventory_type.as_ref()
  }

  pub fn reset_inventory_type(&mut self) {
    self.inventory_type = None;
  }

  pub fn set_region(&mut self, region: Vec<i32>) {
    self.region = Some(region);
  }

  pub fn with_region(mut self, region: Vec<i32>) -> GetSearchOk {
    self.region = Some(region);
    self
  }

  pub fn region(&self) -> Option<&Vec<i32>> {
    self.region.as_ref()
  }

  pub fn reset_region(&mut self) {
    self.region = None;
  }

  pub fn set_solar_system(&mut self, solar_system: Vec<i32>) {
    self.solar_system = Some(solar_system);
  }

  pub fn with_solar_system(mut self, solar_system: Vec<i32>) -> GetSearchOk {
    self.solar_system = Some(solar_system);
    self
  }

  pub fn solar_system(&self) -> Option<&Vec<i32>> {
    self.solar_system.as_ref()
  }

  pub fn reset_solar_system(&mut self) {
    self.solar_system = None;
  }

  pub fn set_station(&mut self, station: Vec<i32>) {
    self.station = Some(station);
  }

  pub fn with_station(mut self, station: Vec<i32>) -> GetSearchOk {
    self.station = Some(station);
    self
  }

  pub fn station(&self) -> Option<&Vec<i32>> {
    self.station.as_ref()
  }

  pub fn reset_station(&mut self) {
    self.station = None;
  }

}



